// <auto-generated>
/*
 * Ours
 *
 * The Ours Server-Side REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Com.OursPrivacy.Client;

namespace Com.OursPrivacy.Model
{
    /// <summary>
    /// These properties are used throughout the Ours app to pass known values onto destinations
    /// </summary>
    public partial class TrackRequestDefaultProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackRequestDefaultProperties" /> class.
        /// </summary>
        /// <param name="isBot">Whether we have detected that the user is a bot. This is set automatically by the Ours server primarily for events tracked through the web SDK.</param>
        /// <param name="adId">The ad id for detected in the session. This is set by the web sdk automatically.</param>
        /// <param name="adsetId">The adset id for detected in the session. This is set by the web sdk automatically.</param>
        /// <param name="campaignId">The campaign id for detected in the session. This is set by the web sdk automatically.</param>
        /// <param name="encoding">The browsers encoding. Ex: UTF-8</param>
        /// <param name="browserName">The name of the browser. Ex: Chrome</param>
        /// <param name="browserVersion">The version of the browser. Ex: 114.0</param>
        /// <param name="cpuArchitecture">The architecture of the CPU. Ex: x64</param>
        /// <param name="deviceType">The type of device the user is using. Ex: mobile</param>
        /// <param name="deviceModel">The model of the device. Ex: iPhone 13</param>
        /// <param name="deviceVendor">The vendor of the device. Ex: Apple</param>
        /// <param name="engineName">The name of the browser engine. Ex: Blink</param>
        /// <param name="engineVersion">The version of the browser engine. Ex: 114.0</param>
        /// <param name="osName">The name of the operating system. Ex: Windows</param>
        /// <param name="osVersion">The version of the operating system. Ex: 10.0</param>
        /// <param name="browserLanguage">The language of the browser. Ex: en-US</param>
        /// <param name="currentUrl">The full url (including query params) of the current page</param>
        /// <param name="webview">Whether the user is in a webview. Ex: true</param>
        /// <param name="iframe">Whether the user is in an iframe. Ex: true</param>
        /// <param name="sessionCount">The number of sessions the user has had. Ex: 3</param>
        /// <param name="activeDuration">The active time in milliseconds that the user had this tab active</param>
        /// <param name="duration">The time in milliseconds since the page was loaded // script was loaded</param>
        /// <param name="epik">The Pinterest Click ID. Ex: epik456</param>
        /// <param name="sacid">The StackAdapt Tracking ID. Ex: sacid123</param>
        /// <param name="fbc">Facebook Click ID with prefix format for Conversions API tracking. Ex: fb.1.1554763741205.AbCdEfGhIjKlMnOpQrStUvWxYz1234567890</param>
        /// <param name="fbclid">Raw Facebook Click ID query parameter without prefix from ad clicks. Ex: AbCdEfGhIjKlMnOpQrStUvWxYz1234567890</param>
        /// <param name="fbclidCreationTime">fbclidCreationTime</param>
        /// <param name="fbp">Facebook Browser ID parameter for identifying browsers and attributing events. Ex: fb.1.1554763741205.1098115397</param>
        /// <param name="gadSource">The Google Ad Source. Ex: google</param>
        /// <param name="gbraid">The Google Braid ID. Ex: gbraid123</param>
        /// <param name="gclid">The Google Click ID. Ex: gclid123</param>
        /// <param name="ndclid">The NextDoor Click ID. Ex: ndclid123</param>
        /// <param name="dclid">The DoubleClick Click ID. Ex: dclid123</param>
        /// <param name="qclid">The Quora Click ID. Ex: qclid123</param>
        /// <param name="rdtCid">The Reddit Click ID. Ex: rdt_cid123</param>
        /// <param name="host">The host of the current page. Ex: example.com</param>
        /// <param name="ip">The IP address of the user. Ex: 127.0.0.1</param>
        /// <param name="msclkid">The Microsoft Click ID. Ex: msclkid123</param>
        /// <param name="liFatId">The LinkedIn Click ID. Ex: li_fat_id123</param>
        /// <param name="pathname">The pathname of the current page. Ex: /home</param>
        /// <param name="referrer">The referrer URL of the current page</param>
        /// <param name="screenHeight">The height of the screen. Ex: 1080</param>
        /// <param name="screenWidth">The width of the screen. Ex: 1920</param>
        /// <param name="title">The title of the current page</param>
        /// <param name="userAgent">The user agent of the browser</param>
        /// <param name="utmCampaign">The UTM Campaign. The web SDK automatically captures this from the query params.</param>
        /// <param name="utmContent">The UTM Content. The web SDK automatically captures this from the query params.</param>
        /// <param name="utmMedium">The UTM Medium. The web SDK automatically captures this from the query params.</param>
        /// <param name="utmName">The UTM Name. The web SDK automatically captures this from the query params.</param>
        /// <param name="ttclid">The TikTok Click ID. Ex: ttclid123</param>
        /// <param name="twclid">The Twitter Click ID. Ex: twclid123</param>
        /// <param name="clickid">The Click ID. Ex: clickid123</param>
        /// <param name="clid">The Generic Click ID. Ex: clid123</param>
        /// <param name="sccid">The SnapChat Click ID. Ex: sccid123</param>
        /// <param name="utmSource">The UTM Source. The web SDK automatically captures this from the query params.</param>
        /// <param name="utmTerm">The UTM Term. The web SDK automatically captures this from the query params.</param>
        /// <param name="varVersion">The version of the web SDK</param>
        /// <param name="wbraid">The WBRAID Identifier. The web SDK automatically captures this from the query params.</param>
        /// <param name="uafvl">User agent as a full list of strings.</param>
        /// <param name="pageHash">A random set of numbers for the page load</param>
        /// <param name="sid">The session ID as assigned automatically by the web SDK.</param>
        /// <param name="newS">Deprecated</param>
        /// <param name="fv">Deprecated</param>
        /// <param name="sr">sr</param>
        [JsonConstructor]
        public TrackRequestDefaultProperties(Option<bool?> isBot = default, Option<string?> adId = default, Option<string?> adsetId = default, Option<string?> campaignId = default, Option<string?> encoding = default, Option<string?> browserName = default, Option<string?> browserVersion = default, Option<string?> cpuArchitecture = default, Option<string?> deviceType = default, Option<string?> deviceModel = default, Option<string?> deviceVendor = default, Option<string?> engineName = default, Option<string?> engineVersion = default, Option<string?> osName = default, Option<string?> osVersion = default, Option<string?> browserLanguage = default, Option<string?> currentUrl = default, Option<bool?> webview = default, Option<bool?> iframe = default, Option<decimal?> sessionCount = default, Option<decimal?> activeDuration = default, Option<decimal?> duration = default, Option<string?> epik = default, Option<string?> sacid = default, Option<string?> fbc = default, Option<string?> fbclid = default, Option<decimal?> fbclidCreationTime = default, Option<string?> fbp = default, Option<string?> gadSource = default, Option<string?> gbraid = default, Option<string?> gclid = default, Option<string?> ndclid = default, Option<string?> dclid = default, Option<string?> qclid = default, Option<string?> rdtCid = default, Option<string?> host = default, Option<string?> ip = default, Option<string?> msclkid = default, Option<string?> liFatId = default, Option<string?> pathname = default, Option<string?> referrer = default, Option<decimal?> screenHeight = default, Option<decimal?> screenWidth = default, Option<string?> title = default, Option<string?> userAgent = default, Option<string?> utmCampaign = default, Option<string?> utmContent = default, Option<string?> utmMedium = default, Option<string?> utmName = default, Option<string?> ttclid = default, Option<string?> twclid = default, Option<string?> clickid = default, Option<string?> clid = default, Option<string?> sccid = default, Option<string?> utmSource = default, Option<string?> utmTerm = default, Option<string?> varVersion = default, Option<string?> wbraid = default, Option<string?> uafvl = default, Option<decimal?> pageHash = default, Option<string?> sid = default, Option<bool?> newS = default, Option<bool?> fv = default, Option<string?> sr = default)
        {
            IsBotOption = isBot;
            AdIdOption = adId;
            AdsetIdOption = adsetId;
            CampaignIdOption = campaignId;
            EncodingOption = encoding;
            BrowserNameOption = browserName;
            BrowserVersionOption = browserVersion;
            CpuArchitectureOption = cpuArchitecture;
            DeviceTypeOption = deviceType;
            DeviceModelOption = deviceModel;
            DeviceVendorOption = deviceVendor;
            EngineNameOption = engineName;
            EngineVersionOption = engineVersion;
            OsNameOption = osName;
            OsVersionOption = osVersion;
            BrowserLanguageOption = browserLanguage;
            CurrentUrlOption = currentUrl;
            WebviewOption = webview;
            IframeOption = iframe;
            SessionCountOption = sessionCount;
            ActiveDurationOption = activeDuration;
            DurationOption = duration;
            EpikOption = epik;
            SacidOption = sacid;
            FbcOption = fbc;
            FbclidOption = fbclid;
            FbclidCreationTimeOption = fbclidCreationTime;
            FbpOption = fbp;
            GadSourceOption = gadSource;
            GbraidOption = gbraid;
            GclidOption = gclid;
            NdclidOption = ndclid;
            DclidOption = dclid;
            QclidOption = qclid;
            RdtCidOption = rdtCid;
            HostOption = host;
            IpOption = ip;
            MsclkidOption = msclkid;
            LiFatIdOption = liFatId;
            PathnameOption = pathname;
            ReferrerOption = referrer;
            ScreenHeightOption = screenHeight;
            ScreenWidthOption = screenWidth;
            TitleOption = title;
            UserAgentOption = userAgent;
            UtmCampaignOption = utmCampaign;
            UtmContentOption = utmContent;
            UtmMediumOption = utmMedium;
            UtmNameOption = utmName;
            TtclidOption = ttclid;
            TwclidOption = twclid;
            ClickidOption = clickid;
            ClidOption = clid;
            SccidOption = sccid;
            UtmSourceOption = utmSource;
            UtmTermOption = utmTerm;
            VarVersionOption = varVersion;
            WbraidOption = wbraid;
            UafvlOption = uafvl;
            PageHashOption = pageHash;
            SidOption = sid;
            NewSOption = newS;
            FvOption = fv;
            SrOption = sr;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of IsBot
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IsBotOption { get; private set; }

        /// <summary>
        /// Whether we have detected that the user is a bot. This is set automatically by the Ours server primarily for events tracked through the web SDK.
        /// </summary>
        /// <value>Whether we have detected that the user is a bot. This is set automatically by the Ours server primarily for events tracked through the web SDK.</value>
        [JsonPropertyName("is_bot")]
        public bool? IsBot { get { return this.IsBotOption; } set { this.IsBotOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AdIdOption { get; private set; }

        /// <summary>
        /// The ad id for detected in the session. This is set by the web sdk automatically.
        /// </summary>
        /// <value>The ad id for detected in the session. This is set by the web sdk automatically.</value>
        [JsonPropertyName("ad_id")]
        public string? AdId { get { return this.AdIdOption; } set { this.AdIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of AdsetId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> AdsetIdOption { get; private set; }

        /// <summary>
        /// The adset id for detected in the session. This is set by the web sdk automatically.
        /// </summary>
        /// <value>The adset id for detected in the session. This is set by the web sdk automatically.</value>
        [JsonPropertyName("adset_id")]
        public string? AdsetId { get { return this.AdsetIdOption; } set { this.AdsetIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CampaignId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CampaignIdOption { get; private set; }

        /// <summary>
        /// The campaign id for detected in the session. This is set by the web sdk automatically.
        /// </summary>
        /// <value>The campaign id for detected in the session. This is set by the web sdk automatically.</value>
        [JsonPropertyName("campaign_id")]
        public string? CampaignId { get { return this.CampaignIdOption; } set { this.CampaignIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Encoding
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EncodingOption { get; private set; }

        /// <summary>
        /// The browsers encoding. Ex: UTF-8
        /// </summary>
        /// <value>The browsers encoding. Ex: UTF-8</value>
        [JsonPropertyName("encoding")]
        public string? Encoding { get { return this.EncodingOption; } set { this.EncodingOption = new(value); } }

        /// <summary>
        /// Used to track the state of BrowserName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BrowserNameOption { get; private set; }

        /// <summary>
        /// The name of the browser. Ex: Chrome
        /// </summary>
        /// <value>The name of the browser. Ex: Chrome</value>
        [JsonPropertyName("browser_name")]
        public string? BrowserName { get { return this.BrowserNameOption; } set { this.BrowserNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of BrowserVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BrowserVersionOption { get; private set; }

        /// <summary>
        /// The version of the browser. Ex: 114.0
        /// </summary>
        /// <value>The version of the browser. Ex: 114.0</value>
        [JsonPropertyName("browser_version")]
        public string? BrowserVersion { get { return this.BrowserVersionOption; } set { this.BrowserVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of CpuArchitecture
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CpuArchitectureOption { get; private set; }

        /// <summary>
        /// The architecture of the CPU. Ex: x64
        /// </summary>
        /// <value>The architecture of the CPU. Ex: x64</value>
        [JsonPropertyName("cpu_architecture")]
        public string? CpuArchitecture { get { return this.CpuArchitectureOption; } set { this.CpuArchitectureOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceType
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeviceTypeOption { get; private set; }

        /// <summary>
        /// The type of device the user is using. Ex: mobile
        /// </summary>
        /// <value>The type of device the user is using. Ex: mobile</value>
        [JsonPropertyName("device_type")]
        public string? DeviceType { get { return this.DeviceTypeOption; } set { this.DeviceTypeOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceModel
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeviceModelOption { get; private set; }

        /// <summary>
        /// The model of the device. Ex: iPhone 13
        /// </summary>
        /// <value>The model of the device. Ex: iPhone 13</value>
        [JsonPropertyName("device_model")]
        public string? DeviceModel { get { return this.DeviceModelOption; } set { this.DeviceModelOption = new(value); } }

        /// <summary>
        /// Used to track the state of DeviceVendor
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DeviceVendorOption { get; private set; }

        /// <summary>
        /// The vendor of the device. Ex: Apple
        /// </summary>
        /// <value>The vendor of the device. Ex: Apple</value>
        [JsonPropertyName("device_vendor")]
        public string? DeviceVendor { get { return this.DeviceVendorOption; } set { this.DeviceVendorOption = new(value); } }

        /// <summary>
        /// Used to track the state of EngineName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EngineNameOption { get; private set; }

        /// <summary>
        /// The name of the browser engine. Ex: Blink
        /// </summary>
        /// <value>The name of the browser engine. Ex: Blink</value>
        [JsonPropertyName("engine_name")]
        public string? EngineName { get { return this.EngineNameOption; } set { this.EngineNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of EngineVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EngineVersionOption { get; private set; }

        /// <summary>
        /// The version of the browser engine. Ex: 114.0
        /// </summary>
        /// <value>The version of the browser engine. Ex: 114.0</value>
        [JsonPropertyName("engine_version")]
        public string? EngineVersion { get { return this.EngineVersionOption; } set { this.EngineVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of OsName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OsNameOption { get; private set; }

        /// <summary>
        /// The name of the operating system. Ex: Windows
        /// </summary>
        /// <value>The name of the operating system. Ex: Windows</value>
        [JsonPropertyName("os_name")]
        public string? OsName { get { return this.OsNameOption; } set { this.OsNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of OsVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> OsVersionOption { get; private set; }

        /// <summary>
        /// The version of the operating system. Ex: 10.0
        /// </summary>
        /// <value>The version of the operating system. Ex: 10.0</value>
        [JsonPropertyName("os_version")]
        public string? OsVersion { get { return this.OsVersionOption; } set { this.OsVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of BrowserLanguage
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> BrowserLanguageOption { get; private set; }

        /// <summary>
        /// The language of the browser. Ex: en-US
        /// </summary>
        /// <value>The language of the browser. Ex: en-US</value>
        [JsonPropertyName("browser_language")]
        public string? BrowserLanguage { get { return this.BrowserLanguageOption; } set { this.BrowserLanguageOption = new(value); } }

        /// <summary>
        /// Used to track the state of CurrentUrl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CurrentUrlOption { get; private set; }

        /// <summary>
        /// The full url (including query params) of the current page
        /// </summary>
        /// <value>The full url (including query params) of the current page</value>
        [JsonPropertyName("current_url")]
        public string? CurrentUrl { get { return this.CurrentUrlOption; } set { this.CurrentUrlOption = new(value); } }

        /// <summary>
        /// Used to track the state of Webview
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> WebviewOption { get; private set; }

        /// <summary>
        /// Whether the user is in a webview. Ex: true
        /// </summary>
        /// <value>Whether the user is in a webview. Ex: true</value>
        [JsonPropertyName("webview")]
        public bool? Webview { get { return this.WebviewOption; } set { this.WebviewOption = new(value); } }

        /// <summary>
        /// Used to track the state of Iframe
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> IframeOption { get; private set; }

        /// <summary>
        /// Whether the user is in an iframe. Ex: true
        /// </summary>
        /// <value>Whether the user is in an iframe. Ex: true</value>
        [JsonPropertyName("iframe")]
        public bool? Iframe { get { return this.IframeOption; } set { this.IframeOption = new(value); } }

        /// <summary>
        /// Used to track the state of SessionCount
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> SessionCountOption { get; private set; }

        /// <summary>
        /// The number of sessions the user has had. Ex: 3
        /// </summary>
        /// <value>The number of sessions the user has had. Ex: 3</value>
        [JsonPropertyName("sessionCount")]
        public decimal? SessionCount { get { return this.SessionCountOption; } set { this.SessionCountOption = new(value); } }

        /// <summary>
        /// Used to track the state of ActiveDuration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ActiveDurationOption { get; private set; }

        /// <summary>
        /// The active time in milliseconds that the user had this tab active
        /// </summary>
        /// <value>The active time in milliseconds that the user had this tab active</value>
        [JsonPropertyName("activeDuration")]
        public decimal? ActiveDuration { get { return this.ActiveDurationOption; } set { this.ActiveDurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Duration
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> DurationOption { get; private set; }

        /// <summary>
        /// The time in milliseconds since the page was loaded // script was loaded
        /// </summary>
        /// <value>The time in milliseconds since the page was loaded // script was loaded</value>
        [JsonPropertyName("duration")]
        public decimal? Duration { get { return this.DurationOption; } set { this.DurationOption = new(value); } }

        /// <summary>
        /// Used to track the state of Epik
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EpikOption { get; private set; }

        /// <summary>
        /// The Pinterest Click ID. Ex: epik456
        /// </summary>
        /// <value>The Pinterest Click ID. Ex: epik456</value>
        [JsonPropertyName("epik")]
        public string? Epik { get { return this.EpikOption; } set { this.EpikOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sacid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SacidOption { get; private set; }

        /// <summary>
        /// The StackAdapt Tracking ID. Ex: sacid123
        /// </summary>
        /// <value>The StackAdapt Tracking ID. Ex: sacid123</value>
        [JsonPropertyName("sacid")]
        public string? Sacid { get { return this.SacidOption; } set { this.SacidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Fbc
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FbcOption { get; private set; }

        /// <summary>
        /// Facebook Click ID with prefix format for Conversions API tracking. Ex: fb.1.1554763741205.AbCdEfGhIjKlMnOpQrStUvWxYz1234567890
        /// </summary>
        /// <value>Facebook Click ID with prefix format for Conversions API tracking. Ex: fb.1.1554763741205.AbCdEfGhIjKlMnOpQrStUvWxYz1234567890</value>
        [JsonPropertyName("fbc")]
        public string? Fbc { get { return this.FbcOption; } set { this.FbcOption = new(value); } }

        /// <summary>
        /// Used to track the state of Fbclid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FbclidOption { get; private set; }

        /// <summary>
        /// Raw Facebook Click ID query parameter without prefix from ad clicks. Ex: AbCdEfGhIjKlMnOpQrStUvWxYz1234567890
        /// </summary>
        /// <value>Raw Facebook Click ID query parameter without prefix from ad clicks. Ex: AbCdEfGhIjKlMnOpQrStUvWxYz1234567890</value>
        [JsonPropertyName("fbclid")]
        public string? Fbclid { get { return this.FbclidOption; } set { this.FbclidOption = new(value); } }

        /// <summary>
        /// Used to track the state of FbclidCreationTime
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> FbclidCreationTimeOption { get; private set; }

        /// <summary>
        /// Gets or Sets FbclidCreationTime
        /// </summary>
        [JsonPropertyName("fbclid_creation_time")]
        public decimal? FbclidCreationTime { get { return this.FbclidCreationTimeOption; } set { this.FbclidCreationTimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of Fbp
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FbpOption { get; private set; }

        /// <summary>
        /// Facebook Browser ID parameter for identifying browsers and attributing events. Ex: fb.1.1554763741205.1098115397
        /// </summary>
        /// <value>Facebook Browser ID parameter for identifying browsers and attributing events. Ex: fb.1.1554763741205.1098115397</value>
        [JsonPropertyName("fbp")]
        public string? Fbp { get { return this.FbpOption; } set { this.FbpOption = new(value); } }

        /// <summary>
        /// Used to track the state of GadSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GadSourceOption { get; private set; }

        /// <summary>
        /// The Google Ad Source. Ex: google
        /// </summary>
        /// <value>The Google Ad Source. Ex: google</value>
        [JsonPropertyName("gad_source")]
        public string? GadSource { get { return this.GadSourceOption; } set { this.GadSourceOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gbraid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GbraidOption { get; private set; }

        /// <summary>
        /// The Google Braid ID. Ex: gbraid123
        /// </summary>
        /// <value>The Google Braid ID. Ex: gbraid123</value>
        [JsonPropertyName("gbraid")]
        public string? Gbraid { get { return this.GbraidOption; } set { this.GbraidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gclid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GclidOption { get; private set; }

        /// <summary>
        /// The Google Click ID. Ex: gclid123
        /// </summary>
        /// <value>The Google Click ID. Ex: gclid123</value>
        [JsonPropertyName("gclid")]
        public string? Gclid { get { return this.GclidOption; } set { this.GclidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ndclid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> NdclidOption { get; private set; }

        /// <summary>
        /// The NextDoor Click ID. Ex: ndclid123
        /// </summary>
        /// <value>The NextDoor Click ID. Ex: ndclid123</value>
        [JsonPropertyName("ndclid")]
        public string? Ndclid { get { return this.NdclidOption; } set { this.NdclidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Dclid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DclidOption { get; private set; }

        /// <summary>
        /// The DoubleClick Click ID. Ex: dclid123
        /// </summary>
        /// <value>The DoubleClick Click ID. Ex: dclid123</value>
        [JsonPropertyName("dclid")]
        public string? Dclid { get { return this.DclidOption; } set { this.DclidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Qclid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> QclidOption { get; private set; }

        /// <summary>
        /// The Quora Click ID. Ex: qclid123
        /// </summary>
        /// <value>The Quora Click ID. Ex: qclid123</value>
        [JsonPropertyName("qclid")]
        public string? Qclid { get { return this.QclidOption; } set { this.QclidOption = new(value); } }

        /// <summary>
        /// Used to track the state of RdtCid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> RdtCidOption { get; private set; }

        /// <summary>
        /// The Reddit Click ID. Ex: rdt_cid123
        /// </summary>
        /// <value>The Reddit Click ID. Ex: rdt_cid123</value>
        [JsonPropertyName("rdt_cid")]
        public string? RdtCid { get { return this.RdtCidOption; } set { this.RdtCidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Host
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> HostOption { get; private set; }

        /// <summary>
        /// The host of the current page. Ex: example.com
        /// </summary>
        /// <value>The host of the current page. Ex: example.com</value>
        [JsonPropertyName("host")]
        public string? Host { get { return this.HostOption; } set { this.HostOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpOption { get; private set; }

        /// <summary>
        /// The IP address of the user. Ex: 127.0.0.1
        /// </summary>
        /// <value>The IP address of the user. Ex: 127.0.0.1</value>
        [JsonPropertyName("ip")]
        public string? Ip { get { return this.IpOption; } set { this.IpOption = new(value); } }

        /// <summary>
        /// Used to track the state of Msclkid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> MsclkidOption { get; private set; }

        /// <summary>
        /// The Microsoft Click ID. Ex: msclkid123
        /// </summary>
        /// <value>The Microsoft Click ID. Ex: msclkid123</value>
        [JsonPropertyName("msclkid")]
        public string? Msclkid { get { return this.MsclkidOption; } set { this.MsclkidOption = new(value); } }

        /// <summary>
        /// Used to track the state of LiFatId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LiFatIdOption { get; private set; }

        /// <summary>
        /// The LinkedIn Click ID. Ex: li_fat_id123
        /// </summary>
        /// <value>The LinkedIn Click ID. Ex: li_fat_id123</value>
        [JsonPropertyName("li_fat_id")]
        public string? LiFatId { get { return this.LiFatIdOption; } set { this.LiFatIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Pathname
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> PathnameOption { get; private set; }

        /// <summary>
        /// The pathname of the current page. Ex: /home
        /// </summary>
        /// <value>The pathname of the current page. Ex: /home</value>
        [JsonPropertyName("pathname")]
        public string? Pathname { get { return this.PathnameOption; } set { this.PathnameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Referrer
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ReferrerOption { get; private set; }

        /// <summary>
        /// The referrer URL of the current page
        /// </summary>
        /// <value>The referrer URL of the current page</value>
        [JsonPropertyName("referrer")]
        public string? Referrer { get { return this.ReferrerOption; } set { this.ReferrerOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScreenHeight
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ScreenHeightOption { get; private set; }

        /// <summary>
        /// The height of the screen. Ex: 1080
        /// </summary>
        /// <value>The height of the screen. Ex: 1080</value>
        [JsonPropertyName("screen_height")]
        public decimal? ScreenHeight { get { return this.ScreenHeightOption; } set { this.ScreenHeightOption = new(value); } }

        /// <summary>
        /// Used to track the state of ScreenWidth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> ScreenWidthOption { get; private set; }

        /// <summary>
        /// The width of the screen. Ex: 1920
        /// </summary>
        /// <value>The width of the screen. Ex: 1920</value>
        [JsonPropertyName("screen_width")]
        public decimal? ScreenWidth { get { return this.ScreenWidthOption; } set { this.ScreenWidthOption = new(value); } }

        /// <summary>
        /// Used to track the state of Title
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TitleOption { get; private set; }

        /// <summary>
        /// The title of the current page
        /// </summary>
        /// <value>The title of the current page</value>
        [JsonPropertyName("title")]
        public string? Title { get { return this.TitleOption; } set { this.TitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserAgent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserAgentOption { get; private set; }

        /// <summary>
        /// The user agent of the browser
        /// </summary>
        /// <value>The user agent of the browser</value>
        [JsonPropertyName("user_agent")]
        public string? UserAgent { get { return this.UserAgentOption; } set { this.UserAgentOption = new(value); } }

        /// <summary>
        /// Used to track the state of UtmCampaign
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UtmCampaignOption { get; private set; }

        /// <summary>
        /// The UTM Campaign. The web SDK automatically captures this from the query params.
        /// </summary>
        /// <value>The UTM Campaign. The web SDK automatically captures this from the query params.</value>
        [JsonPropertyName("utm_campaign")]
        public string? UtmCampaign { get { return this.UtmCampaignOption; } set { this.UtmCampaignOption = new(value); } }

        /// <summary>
        /// Used to track the state of UtmContent
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UtmContentOption { get; private set; }

        /// <summary>
        /// The UTM Content. The web SDK automatically captures this from the query params.
        /// </summary>
        /// <value>The UTM Content. The web SDK automatically captures this from the query params.</value>
        [JsonPropertyName("utm_content")]
        public string? UtmContent { get { return this.UtmContentOption; } set { this.UtmContentOption = new(value); } }

        /// <summary>
        /// Used to track the state of UtmMedium
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UtmMediumOption { get; private set; }

        /// <summary>
        /// The UTM Medium. The web SDK automatically captures this from the query params.
        /// </summary>
        /// <value>The UTM Medium. The web SDK automatically captures this from the query params.</value>
        [JsonPropertyName("utm_medium")]
        public string? UtmMedium { get { return this.UtmMediumOption; } set { this.UtmMediumOption = new(value); } }

        /// <summary>
        /// Used to track the state of UtmName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UtmNameOption { get; private set; }

        /// <summary>
        /// The UTM Name. The web SDK automatically captures this from the query params.
        /// </summary>
        /// <value>The UTM Name. The web SDK automatically captures this from the query params.</value>
        [JsonPropertyName("utm_name")]
        public string? UtmName { get { return this.UtmNameOption; } set { this.UtmNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ttclid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TtclidOption { get; private set; }

        /// <summary>
        /// The TikTok Click ID. Ex: ttclid123
        /// </summary>
        /// <value>The TikTok Click ID. Ex: ttclid123</value>
        [JsonPropertyName("ttclid")]
        public string? Ttclid { get { return this.TtclidOption; } set { this.TtclidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Twclid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> TwclidOption { get; private set; }

        /// <summary>
        /// The Twitter Click ID. Ex: twclid123
        /// </summary>
        /// <value>The Twitter Click ID. Ex: twclid123</value>
        [JsonPropertyName("twclid")]
        public string? Twclid { get { return this.TwclidOption; } set { this.TwclidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Clickid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClickidOption { get; private set; }

        /// <summary>
        /// The Click ID. Ex: clickid123
        /// </summary>
        /// <value>The Click ID. Ex: clickid123</value>
        [JsonPropertyName("clickid")]
        public string? Clickid { get { return this.ClickidOption; } set { this.ClickidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Clid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ClidOption { get; private set; }

        /// <summary>
        /// The Generic Click ID. Ex: clid123
        /// </summary>
        /// <value>The Generic Click ID. Ex: clid123</value>
        [JsonPropertyName("clid")]
        public string? Clid { get { return this.ClidOption; } set { this.ClidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sccid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SccidOption { get; private set; }

        /// <summary>
        /// The SnapChat Click ID. Ex: sccid123
        /// </summary>
        /// <value>The SnapChat Click ID. Ex: sccid123</value>
        [JsonPropertyName("sccid")]
        public string? Sccid { get { return this.SccidOption; } set { this.SccidOption = new(value); } }

        /// <summary>
        /// Used to track the state of UtmSource
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UtmSourceOption { get; private set; }

        /// <summary>
        /// The UTM Source. The web SDK automatically captures this from the query params.
        /// </summary>
        /// <value>The UTM Source. The web SDK automatically captures this from the query params.</value>
        [JsonPropertyName("utm_source")]
        public string? UtmSource { get { return this.UtmSourceOption; } set { this.UtmSourceOption = new(value); } }

        /// <summary>
        /// Used to track the state of UtmTerm
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UtmTermOption { get; private set; }

        /// <summary>
        /// The UTM Term. The web SDK automatically captures this from the query params.
        /// </summary>
        /// <value>The UTM Term. The web SDK automatically captures this from the query params.</value>
        [JsonPropertyName("utm_term")]
        public string? UtmTerm { get { return this.UtmTermOption; } set { this.UtmTermOption = new(value); } }

        /// <summary>
        /// Used to track the state of VarVersion
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> VarVersionOption { get; private set; }

        /// <summary>
        /// The version of the web SDK
        /// </summary>
        /// <value>The version of the web SDK</value>
        [JsonPropertyName("version")]
        public string? VarVersion { get { return this.VarVersionOption; } set { this.VarVersionOption = new(value); } }

        /// <summary>
        /// Used to track the state of Wbraid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> WbraidOption { get; private set; }

        /// <summary>
        /// The WBRAID Identifier. The web SDK automatically captures this from the query params.
        /// </summary>
        /// <value>The WBRAID Identifier. The web SDK automatically captures this from the query params.</value>
        [JsonPropertyName("wbraid")]
        public string? Wbraid { get { return this.WbraidOption; } set { this.WbraidOption = new(value); } }

        /// <summary>
        /// Used to track the state of Uafvl
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UafvlOption { get; private set; }

        /// <summary>
        /// User agent as a full list of strings.
        /// </summary>
        /// <value>User agent as a full list of strings.</value>
        [JsonPropertyName("uafvl")]
        public string? Uafvl { get { return this.UafvlOption; } set { this.UafvlOption = new(value); } }

        /// <summary>
        /// Used to track the state of PageHash
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> PageHashOption { get; private set; }

        /// <summary>
        /// A random set of numbers for the page load
        /// </summary>
        /// <value>A random set of numbers for the page load</value>
        [JsonPropertyName("page_hash")]
        public decimal? PageHash { get { return this.PageHashOption; } set { this.PageHashOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sid
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SidOption { get; private set; }

        /// <summary>
        /// The session ID as assigned automatically by the web SDK.
        /// </summary>
        /// <value>The session ID as assigned automatically by the web SDK.</value>
        [JsonPropertyName("sid")]
        public string? Sid { get { return this.SidOption; } set { this.SidOption = new(value); } }

        /// <summary>
        /// Used to track the state of NewS
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> NewSOption { get; private set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [JsonPropertyName("new_s")]
        public bool? NewS { get { return this.NewSOption; } set { this.NewSOption = new(value); } }

        /// <summary>
        /// Used to track the state of Fv
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<bool?> FvOption { get; private set; }

        /// <summary>
        /// Deprecated
        /// </summary>
        /// <value>Deprecated</value>
        [JsonPropertyName("fv")]
        public bool? Fv { get { return this.FvOption; } set { this.FvOption = new(value); } }

        /// <summary>
        /// Used to track the state of Sr
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> SrOption { get; private set; }

        /// <summary>
        /// Gets or Sets Sr
        /// </summary>
        [JsonPropertyName("sr")]
        public string? Sr { get { return this.SrOption; } set { this.SrOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackRequestDefaultProperties {\n");
            sb.Append("  IsBot: ").Append(IsBot).Append("\n");
            sb.Append("  AdId: ").Append(AdId).Append("\n");
            sb.Append("  AdsetId: ").Append(AdsetId).Append("\n");
            sb.Append("  CampaignId: ").Append(CampaignId).Append("\n");
            sb.Append("  Encoding: ").Append(Encoding).Append("\n");
            sb.Append("  BrowserName: ").Append(BrowserName).Append("\n");
            sb.Append("  BrowserVersion: ").Append(BrowserVersion).Append("\n");
            sb.Append("  CpuArchitecture: ").Append(CpuArchitecture).Append("\n");
            sb.Append("  DeviceType: ").Append(DeviceType).Append("\n");
            sb.Append("  DeviceModel: ").Append(DeviceModel).Append("\n");
            sb.Append("  DeviceVendor: ").Append(DeviceVendor).Append("\n");
            sb.Append("  EngineName: ").Append(EngineName).Append("\n");
            sb.Append("  EngineVersion: ").Append(EngineVersion).Append("\n");
            sb.Append("  OsName: ").Append(OsName).Append("\n");
            sb.Append("  OsVersion: ").Append(OsVersion).Append("\n");
            sb.Append("  BrowserLanguage: ").Append(BrowserLanguage).Append("\n");
            sb.Append("  CurrentUrl: ").Append(CurrentUrl).Append("\n");
            sb.Append("  Webview: ").Append(Webview).Append("\n");
            sb.Append("  Iframe: ").Append(Iframe).Append("\n");
            sb.Append("  SessionCount: ").Append(SessionCount).Append("\n");
            sb.Append("  ActiveDuration: ").Append(ActiveDuration).Append("\n");
            sb.Append("  Duration: ").Append(Duration).Append("\n");
            sb.Append("  Epik: ").Append(Epik).Append("\n");
            sb.Append("  Sacid: ").Append(Sacid).Append("\n");
            sb.Append("  Fbc: ").Append(Fbc).Append("\n");
            sb.Append("  Fbclid: ").Append(Fbclid).Append("\n");
            sb.Append("  FbclidCreationTime: ").Append(FbclidCreationTime).Append("\n");
            sb.Append("  Fbp: ").Append(Fbp).Append("\n");
            sb.Append("  GadSource: ").Append(GadSource).Append("\n");
            sb.Append("  Gbraid: ").Append(Gbraid).Append("\n");
            sb.Append("  Gclid: ").Append(Gclid).Append("\n");
            sb.Append("  Ndclid: ").Append(Ndclid).Append("\n");
            sb.Append("  Dclid: ").Append(Dclid).Append("\n");
            sb.Append("  Qclid: ").Append(Qclid).Append("\n");
            sb.Append("  RdtCid: ").Append(RdtCid).Append("\n");
            sb.Append("  Host: ").Append(Host).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  Msclkid: ").Append(Msclkid).Append("\n");
            sb.Append("  LiFatId: ").Append(LiFatId).Append("\n");
            sb.Append("  Pathname: ").Append(Pathname).Append("\n");
            sb.Append("  Referrer: ").Append(Referrer).Append("\n");
            sb.Append("  ScreenHeight: ").Append(ScreenHeight).Append("\n");
            sb.Append("  ScreenWidth: ").Append(ScreenWidth).Append("\n");
            sb.Append("  Title: ").Append(Title).Append("\n");
            sb.Append("  UserAgent: ").Append(UserAgent).Append("\n");
            sb.Append("  UtmCampaign: ").Append(UtmCampaign).Append("\n");
            sb.Append("  UtmContent: ").Append(UtmContent).Append("\n");
            sb.Append("  UtmMedium: ").Append(UtmMedium).Append("\n");
            sb.Append("  UtmName: ").Append(UtmName).Append("\n");
            sb.Append("  Ttclid: ").Append(Ttclid).Append("\n");
            sb.Append("  Twclid: ").Append(Twclid).Append("\n");
            sb.Append("  Clickid: ").Append(Clickid).Append("\n");
            sb.Append("  Clid: ").Append(Clid).Append("\n");
            sb.Append("  Sccid: ").Append(Sccid).Append("\n");
            sb.Append("  UtmSource: ").Append(UtmSource).Append("\n");
            sb.Append("  UtmTerm: ").Append(UtmTerm).Append("\n");
            sb.Append("  VarVersion: ").Append(VarVersion).Append("\n");
            sb.Append("  Wbraid: ").Append(Wbraid).Append("\n");
            sb.Append("  Uafvl: ").Append(Uafvl).Append("\n");
            sb.Append("  PageHash: ").Append(PageHash).Append("\n");
            sb.Append("  Sid: ").Append(Sid).Append("\n");
            sb.Append("  NewS: ").Append(NewS).Append("\n");
            sb.Append("  Fv: ").Append(Fv).Append("\n");
            sb.Append("  Sr: ").Append(Sr).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // AdId (string) maxLength
            if (this.AdId != null && this.AdId.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for AdId, length must be less than 2000.", new [] { "AdId" });
            }

            // AdsetId (string) maxLength
            if (this.AdsetId != null && this.AdsetId.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for AdsetId, length must be less than 2000.", new [] { "AdsetId" });
            }

            // CampaignId (string) maxLength
            if (this.CampaignId != null && this.CampaignId.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for CampaignId, length must be less than 2000.", new [] { "CampaignId" });
            }

            // Encoding (string) maxLength
            if (this.Encoding != null && this.Encoding.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Encoding, length must be less than 2000.", new [] { "Encoding" });
            }

            // BrowserName (string) maxLength
            if (this.BrowserName != null && this.BrowserName.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for BrowserName, length must be less than 2000.", new [] { "BrowserName" });
            }

            // BrowserVersion (string) maxLength
            if (this.BrowserVersion != null && this.BrowserVersion.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for BrowserVersion, length must be less than 2000.", new [] { "BrowserVersion" });
            }

            // CpuArchitecture (string) maxLength
            if (this.CpuArchitecture != null && this.CpuArchitecture.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for CpuArchitecture, length must be less than 2000.", new [] { "CpuArchitecture" });
            }

            // DeviceType (string) maxLength
            if (this.DeviceType != null && this.DeviceType.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for DeviceType, length must be less than 2000.", new [] { "DeviceType" });
            }

            // DeviceModel (string) maxLength
            if (this.DeviceModel != null && this.DeviceModel.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for DeviceModel, length must be less than 2000.", new [] { "DeviceModel" });
            }

            // DeviceVendor (string) maxLength
            if (this.DeviceVendor != null && this.DeviceVendor.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for DeviceVendor, length must be less than 2000.", new [] { "DeviceVendor" });
            }

            // EngineName (string) maxLength
            if (this.EngineName != null && this.EngineName.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for EngineName, length must be less than 2000.", new [] { "EngineName" });
            }

            // EngineVersion (string) maxLength
            if (this.EngineVersion != null && this.EngineVersion.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for EngineVersion, length must be less than 2000.", new [] { "EngineVersion" });
            }

            // OsName (string) maxLength
            if (this.OsName != null && this.OsName.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for OsName, length must be less than 2000.", new [] { "OsName" });
            }

            // OsVersion (string) maxLength
            if (this.OsVersion != null && this.OsVersion.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for OsVersion, length must be less than 2000.", new [] { "OsVersion" });
            }

            // BrowserLanguage (string) maxLength
            if (this.BrowserLanguage != null && this.BrowserLanguage.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for BrowserLanguage, length must be less than 2000.", new [] { "BrowserLanguage" });
            }

            // Epik (string) maxLength
            if (this.Epik != null && this.Epik.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Epik, length must be less than 2000.", new [] { "Epik" });
            }

            // Sacid (string) maxLength
            if (this.Sacid != null && this.Sacid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Sacid, length must be less than 2000.", new [] { "Sacid" });
            }

            // Fbc (string) maxLength
            if (this.Fbc != null && this.Fbc.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Fbc, length must be less than 2000.", new [] { "Fbc" });
            }

            // Fbclid (string) maxLength
            if (this.Fbclid != null && this.Fbclid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Fbclid, length must be less than 2000.", new [] { "Fbclid" });
            }

            // Fbp (string) maxLength
            if (this.Fbp != null && this.Fbp.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Fbp, length must be less than 2000.", new [] { "Fbp" });
            }

            // GadSource (string) maxLength
            if (this.GadSource != null && this.GadSource.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for GadSource, length must be less than 2000.", new [] { "GadSource" });
            }

            // Gbraid (string) maxLength
            if (this.Gbraid != null && this.Gbraid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Gbraid, length must be less than 2000.", new [] { "Gbraid" });
            }

            // Gclid (string) maxLength
            if (this.Gclid != null && this.Gclid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Gclid, length must be less than 2000.", new [] { "Gclid" });
            }

            // Ndclid (string) maxLength
            if (this.Ndclid != null && this.Ndclid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Ndclid, length must be less than 2000.", new [] { "Ndclid" });
            }

            // Dclid (string) maxLength
            if (this.Dclid != null && this.Dclid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Dclid, length must be less than 2000.", new [] { "Dclid" });
            }

            // Qclid (string) maxLength
            if (this.Qclid != null && this.Qclid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Qclid, length must be less than 2000.", new [] { "Qclid" });
            }

            // RdtCid (string) maxLength
            if (this.RdtCid != null && this.RdtCid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for RdtCid, length must be less than 2000.", new [] { "RdtCid" });
            }

            // Host (string) maxLength
            if (this.Host != null && this.Host.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Host, length must be less than 2000.", new [] { "Host" });
            }

            // Ip (string) maxLength
            if (this.Ip != null && this.Ip.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Ip, length must be less than 2000.", new [] { "Ip" });
            }

            // Msclkid (string) maxLength
            if (this.Msclkid != null && this.Msclkid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Msclkid, length must be less than 2000.", new [] { "Msclkid" });
            }

            // LiFatId (string) maxLength
            if (this.LiFatId != null && this.LiFatId.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for LiFatId, length must be less than 2000.", new [] { "LiFatId" });
            }

            // Pathname (string) maxLength
            if (this.Pathname != null && this.Pathname.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Pathname, length must be less than 2000.", new [] { "Pathname" });
            }

            // Referrer (string) maxLength
            if (this.Referrer != null && this.Referrer.Length > 5000)
            {
                yield return new ValidationResult("Invalid value for Referrer, length must be less than 5000.", new [] { "Referrer" });
            }

            // Title (string) maxLength
            if (this.Title != null && this.Title.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Title, length must be less than 2000.", new [] { "Title" });
            }

            // UtmCampaign (string) maxLength
            if (this.UtmCampaign != null && this.UtmCampaign.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for UtmCampaign, length must be less than 2000.", new [] { "UtmCampaign" });
            }

            // UtmContent (string) maxLength
            if (this.UtmContent != null && this.UtmContent.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for UtmContent, length must be less than 2000.", new [] { "UtmContent" });
            }

            // UtmMedium (string) maxLength
            if (this.UtmMedium != null && this.UtmMedium.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for UtmMedium, length must be less than 2000.", new [] { "UtmMedium" });
            }

            // UtmName (string) maxLength
            if (this.UtmName != null && this.UtmName.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for UtmName, length must be less than 2000.", new [] { "UtmName" });
            }

            // Ttclid (string) maxLength
            if (this.Ttclid != null && this.Ttclid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Ttclid, length must be less than 2000.", new [] { "Ttclid" });
            }

            // Twclid (string) maxLength
            if (this.Twclid != null && this.Twclid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Twclid, length must be less than 2000.", new [] { "Twclid" });
            }

            // Clickid (string) maxLength
            if (this.Clickid != null && this.Clickid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Clickid, length must be less than 2000.", new [] { "Clickid" });
            }

            // Clid (string) maxLength
            if (this.Clid != null && this.Clid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Clid, length must be less than 2000.", new [] { "Clid" });
            }

            // Sccid (string) maxLength
            if (this.Sccid != null && this.Sccid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Sccid, length must be less than 2000.", new [] { "Sccid" });
            }

            // UtmSource (string) maxLength
            if (this.UtmSource != null && this.UtmSource.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for UtmSource, length must be less than 2000.", new [] { "UtmSource" });
            }

            // UtmTerm (string) maxLength
            if (this.UtmTerm != null && this.UtmTerm.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for UtmTerm, length must be less than 2000.", new [] { "UtmTerm" });
            }

            // VarVersion (string) maxLength
            if (this.VarVersion != null && this.VarVersion.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for VarVersion, length must be less than 2000.", new [] { "VarVersion" });
            }

            // Wbraid (string) maxLength
            if (this.Wbraid != null && this.Wbraid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Wbraid, length must be less than 2000.", new [] { "Wbraid" });
            }

            // Uafvl (string) maxLength
            if (this.Uafvl != null && this.Uafvl.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Uafvl, length must be less than 2000.", new [] { "Uafvl" });
            }

            // Sid (string) maxLength
            if (this.Sid != null && this.Sid.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Sid, length must be less than 2000.", new [] { "Sid" });
            }

            // Sr (string) maxLength
            if (this.Sr != null && this.Sr.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Sr, length must be less than 2000.", new [] { "Sr" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackRequestDefaultProperties" />
    /// </summary>
    public class TrackRequestDefaultPropertiesJsonConverter : JsonConverter<TrackRequestDefaultProperties>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackRequestDefaultProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackRequestDefaultProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<bool?> isBot = default;
            Option<string?> adId = default;
            Option<string?> adsetId = default;
            Option<string?> campaignId = default;
            Option<string?> encoding = default;
            Option<string?> browserName = default;
            Option<string?> browserVersion = default;
            Option<string?> cpuArchitecture = default;
            Option<string?> deviceType = default;
            Option<string?> deviceModel = default;
            Option<string?> deviceVendor = default;
            Option<string?> engineName = default;
            Option<string?> engineVersion = default;
            Option<string?> osName = default;
            Option<string?> osVersion = default;
            Option<string?> browserLanguage = default;
            Option<string?> currentUrl = default;
            Option<bool?> webview = default;
            Option<bool?> iframe = default;
            Option<decimal?> sessionCount = default;
            Option<decimal?> activeDuration = default;
            Option<decimal?> duration = default;
            Option<string?> epik = default;
            Option<string?> sacid = default;
            Option<string?> fbc = default;
            Option<string?> fbclid = default;
            Option<decimal?> fbclidCreationTime = default;
            Option<string?> fbp = default;
            Option<string?> gadSource = default;
            Option<string?> gbraid = default;
            Option<string?> gclid = default;
            Option<string?> ndclid = default;
            Option<string?> dclid = default;
            Option<string?> qclid = default;
            Option<string?> rdtCid = default;
            Option<string?> host = default;
            Option<string?> ip = default;
            Option<string?> msclkid = default;
            Option<string?> liFatId = default;
            Option<string?> pathname = default;
            Option<string?> referrer = default;
            Option<decimal?> screenHeight = default;
            Option<decimal?> screenWidth = default;
            Option<string?> title = default;
            Option<string?> userAgent = default;
            Option<string?> utmCampaign = default;
            Option<string?> utmContent = default;
            Option<string?> utmMedium = default;
            Option<string?> utmName = default;
            Option<string?> ttclid = default;
            Option<string?> twclid = default;
            Option<string?> clickid = default;
            Option<string?> clid = default;
            Option<string?> sccid = default;
            Option<string?> utmSource = default;
            Option<string?> utmTerm = default;
            Option<string?> varVersion = default;
            Option<string?> wbraid = default;
            Option<string?> uafvl = default;
            Option<decimal?> pageHash = default;
            Option<string?> sid = default;
            Option<bool?> newS = default;
            Option<bool?> fv = default;
            Option<string?> sr = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "is_bot":
                            isBot = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "ad_id":
                            adId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "adset_id":
                            adsetId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "campaign_id":
                            campaignId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "encoding":
                            encoding = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "browser_name":
                            browserName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "browser_version":
                            browserVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "cpu_architecture":
                            cpuArchitecture = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "device_type":
                            deviceType = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "device_model":
                            deviceModel = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "device_vendor":
                            deviceVendor = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "engine_name":
                            engineName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "engine_version":
                            engineVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "os_name":
                            osName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "os_version":
                            osVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "browser_language":
                            browserLanguage = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "current_url":
                            currentUrl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "webview":
                            webview = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "iframe":
                            iframe = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sessionCount":
                            sessionCount = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "activeDuration":
                            activeDuration = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "duration":
                            duration = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "epik":
                            epik = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sacid":
                            sacid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fbc":
                            fbc = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fbclid":
                            fbclid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "fbclid_creation_time":
                            fbclidCreationTime = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "fbp":
                            fbp = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "gad_source":
                            gadSource = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "gbraid":
                            gbraid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "gclid":
                            gclid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ndclid":
                            ndclid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "dclid":
                            dclid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "qclid":
                            qclid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "rdt_cid":
                            rdtCid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "host":
                            host = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "msclkid":
                            msclkid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "li_fat_id":
                            liFatId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "pathname":
                            pathname = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "referrer":
                            referrer = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "screen_height":
                            screenHeight = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "screen_width":
                            screenWidth = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "title":
                            title = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "user_agent":
                            userAgent = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "utm_campaign":
                            utmCampaign = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "utm_content":
                            utmContent = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "utm_medium":
                            utmMedium = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "utm_name":
                            utmName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ttclid":
                            ttclid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "twclid":
                            twclid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "clickid":
                            clickid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "clid":
                            clid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "sccid":
                            sccid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "utm_source":
                            utmSource = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "utm_term":
                            utmTerm = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "version":
                            varVersion = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "wbraid":
                            wbraid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "uafvl":
                            uafvl = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "page_hash":
                            pageHash = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "sid":
                            sid = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "new_s":
                            newS = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "fv":
                            fv = new Option<bool?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (bool?)null : utf8JsonReader.GetBoolean());
                            break;
                        case "sr":
                            sr = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            return new TrackRequestDefaultProperties(isBot, adId, adsetId, campaignId, encoding, browserName, browserVersion, cpuArchitecture, deviceType, deviceModel, deviceVendor, engineName, engineVersion, osName, osVersion, browserLanguage, currentUrl, webview, iframe, sessionCount, activeDuration, duration, epik, sacid, fbc, fbclid, fbclidCreationTime, fbp, gadSource, gbraid, gclid, ndclid, dclid, qclid, rdtCid, host, ip, msclkid, liFatId, pathname, referrer, screenHeight, screenWidth, title, userAgent, utmCampaign, utmContent, utmMedium, utmName, ttclid, twclid, clickid, clid, sccid, utmSource, utmTerm, varVersion, wbraid, uafvl, pageHash, sid, newS, fv, sr);
        }

        /// <summary>
        /// Serializes a <see cref="TrackRequestDefaultProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackRequestDefaultProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackRequestDefaultProperties trackRequestDefaultProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackRequestDefaultProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackRequestDefaultProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackRequestDefaultProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackRequestDefaultProperties trackRequestDefaultProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackRequestDefaultProperties.IsBotOption.IsSet)
                if (trackRequestDefaultProperties.IsBotOption.Value != null)
                    writer.WriteBoolean("is_bot", trackRequestDefaultProperties.IsBotOption.Value!.Value);
                else
                    writer.WriteNull("is_bot");

            if (trackRequestDefaultProperties.AdIdOption.IsSet)
                if (trackRequestDefaultProperties.AdIdOption.Value != null)
                    writer.WriteString("ad_id", trackRequestDefaultProperties.AdId);
                else
                    writer.WriteNull("ad_id");

            if (trackRequestDefaultProperties.AdsetIdOption.IsSet)
                if (trackRequestDefaultProperties.AdsetIdOption.Value != null)
                    writer.WriteString("adset_id", trackRequestDefaultProperties.AdsetId);
                else
                    writer.WriteNull("adset_id");

            if (trackRequestDefaultProperties.CampaignIdOption.IsSet)
                if (trackRequestDefaultProperties.CampaignIdOption.Value != null)
                    writer.WriteString("campaign_id", trackRequestDefaultProperties.CampaignId);
                else
                    writer.WriteNull("campaign_id");

            if (trackRequestDefaultProperties.EncodingOption.IsSet)
                if (trackRequestDefaultProperties.EncodingOption.Value != null)
                    writer.WriteString("encoding", trackRequestDefaultProperties.Encoding);
                else
                    writer.WriteNull("encoding");

            if (trackRequestDefaultProperties.BrowserNameOption.IsSet)
                if (trackRequestDefaultProperties.BrowserNameOption.Value != null)
                    writer.WriteString("browser_name", trackRequestDefaultProperties.BrowserName);
                else
                    writer.WriteNull("browser_name");

            if (trackRequestDefaultProperties.BrowserVersionOption.IsSet)
                if (trackRequestDefaultProperties.BrowserVersionOption.Value != null)
                    writer.WriteString("browser_version", trackRequestDefaultProperties.BrowserVersion);
                else
                    writer.WriteNull("browser_version");

            if (trackRequestDefaultProperties.CpuArchitectureOption.IsSet)
                if (trackRequestDefaultProperties.CpuArchitectureOption.Value != null)
                    writer.WriteString("cpu_architecture", trackRequestDefaultProperties.CpuArchitecture);
                else
                    writer.WriteNull("cpu_architecture");

            if (trackRequestDefaultProperties.DeviceTypeOption.IsSet)
                if (trackRequestDefaultProperties.DeviceTypeOption.Value != null)
                    writer.WriteString("device_type", trackRequestDefaultProperties.DeviceType);
                else
                    writer.WriteNull("device_type");

            if (trackRequestDefaultProperties.DeviceModelOption.IsSet)
                if (trackRequestDefaultProperties.DeviceModelOption.Value != null)
                    writer.WriteString("device_model", trackRequestDefaultProperties.DeviceModel);
                else
                    writer.WriteNull("device_model");

            if (trackRequestDefaultProperties.DeviceVendorOption.IsSet)
                if (trackRequestDefaultProperties.DeviceVendorOption.Value != null)
                    writer.WriteString("device_vendor", trackRequestDefaultProperties.DeviceVendor);
                else
                    writer.WriteNull("device_vendor");

            if (trackRequestDefaultProperties.EngineNameOption.IsSet)
                if (trackRequestDefaultProperties.EngineNameOption.Value != null)
                    writer.WriteString("engine_name", trackRequestDefaultProperties.EngineName);
                else
                    writer.WriteNull("engine_name");

            if (trackRequestDefaultProperties.EngineVersionOption.IsSet)
                if (trackRequestDefaultProperties.EngineVersionOption.Value != null)
                    writer.WriteString("engine_version", trackRequestDefaultProperties.EngineVersion);
                else
                    writer.WriteNull("engine_version");

            if (trackRequestDefaultProperties.OsNameOption.IsSet)
                if (trackRequestDefaultProperties.OsNameOption.Value != null)
                    writer.WriteString("os_name", trackRequestDefaultProperties.OsName);
                else
                    writer.WriteNull("os_name");

            if (trackRequestDefaultProperties.OsVersionOption.IsSet)
                if (trackRequestDefaultProperties.OsVersionOption.Value != null)
                    writer.WriteString("os_version", trackRequestDefaultProperties.OsVersion);
                else
                    writer.WriteNull("os_version");

            if (trackRequestDefaultProperties.BrowserLanguageOption.IsSet)
                if (trackRequestDefaultProperties.BrowserLanguageOption.Value != null)
                    writer.WriteString("browser_language", trackRequestDefaultProperties.BrowserLanguage);
                else
                    writer.WriteNull("browser_language");

            if (trackRequestDefaultProperties.CurrentUrlOption.IsSet)
                if (trackRequestDefaultProperties.CurrentUrlOption.Value != null)
                    writer.WriteString("current_url", trackRequestDefaultProperties.CurrentUrl);
                else
                    writer.WriteNull("current_url");

            if (trackRequestDefaultProperties.WebviewOption.IsSet)
                if (trackRequestDefaultProperties.WebviewOption.Value != null)
                    writer.WriteBoolean("webview", trackRequestDefaultProperties.WebviewOption.Value!.Value);
                else
                    writer.WriteNull("webview");

            if (trackRequestDefaultProperties.IframeOption.IsSet)
                if (trackRequestDefaultProperties.IframeOption.Value != null)
                    writer.WriteBoolean("iframe", trackRequestDefaultProperties.IframeOption.Value!.Value);
                else
                    writer.WriteNull("iframe");

            if (trackRequestDefaultProperties.SessionCountOption.IsSet)
                if (trackRequestDefaultProperties.SessionCountOption.Value != null)
                    writer.WriteNumber("sessionCount", trackRequestDefaultProperties.SessionCountOption.Value!.Value);
                else
                    writer.WriteNull("sessionCount");

            if (trackRequestDefaultProperties.ActiveDurationOption.IsSet)
                if (trackRequestDefaultProperties.ActiveDurationOption.Value != null)
                    writer.WriteNumber("activeDuration", trackRequestDefaultProperties.ActiveDurationOption.Value!.Value);
                else
                    writer.WriteNull("activeDuration");

            if (trackRequestDefaultProperties.DurationOption.IsSet)
                if (trackRequestDefaultProperties.DurationOption.Value != null)
                    writer.WriteNumber("duration", trackRequestDefaultProperties.DurationOption.Value!.Value);
                else
                    writer.WriteNull("duration");

            if (trackRequestDefaultProperties.EpikOption.IsSet)
                if (trackRequestDefaultProperties.EpikOption.Value != null)
                    writer.WriteString("epik", trackRequestDefaultProperties.Epik);
                else
                    writer.WriteNull("epik");

            if (trackRequestDefaultProperties.SacidOption.IsSet)
                if (trackRequestDefaultProperties.SacidOption.Value != null)
                    writer.WriteString("sacid", trackRequestDefaultProperties.Sacid);
                else
                    writer.WriteNull("sacid");

            if (trackRequestDefaultProperties.FbcOption.IsSet)
                if (trackRequestDefaultProperties.FbcOption.Value != null)
                    writer.WriteString("fbc", trackRequestDefaultProperties.Fbc);
                else
                    writer.WriteNull("fbc");

            if (trackRequestDefaultProperties.FbclidOption.IsSet)
                if (trackRequestDefaultProperties.FbclidOption.Value != null)
                    writer.WriteString("fbclid", trackRequestDefaultProperties.Fbclid);
                else
                    writer.WriteNull("fbclid");

            if (trackRequestDefaultProperties.FbclidCreationTimeOption.IsSet)
                if (trackRequestDefaultProperties.FbclidCreationTimeOption.Value != null)
                    writer.WriteNumber("fbclid_creation_time", trackRequestDefaultProperties.FbclidCreationTimeOption.Value!.Value);
                else
                    writer.WriteNull("fbclid_creation_time");

            if (trackRequestDefaultProperties.FbpOption.IsSet)
                if (trackRequestDefaultProperties.FbpOption.Value != null)
                    writer.WriteString("fbp", trackRequestDefaultProperties.Fbp);
                else
                    writer.WriteNull("fbp");

            if (trackRequestDefaultProperties.GadSourceOption.IsSet)
                if (trackRequestDefaultProperties.GadSourceOption.Value != null)
                    writer.WriteString("gad_source", trackRequestDefaultProperties.GadSource);
                else
                    writer.WriteNull("gad_source");

            if (trackRequestDefaultProperties.GbraidOption.IsSet)
                if (trackRequestDefaultProperties.GbraidOption.Value != null)
                    writer.WriteString("gbraid", trackRequestDefaultProperties.Gbraid);
                else
                    writer.WriteNull("gbraid");

            if (trackRequestDefaultProperties.GclidOption.IsSet)
                if (trackRequestDefaultProperties.GclidOption.Value != null)
                    writer.WriteString("gclid", trackRequestDefaultProperties.Gclid);
                else
                    writer.WriteNull("gclid");

            if (trackRequestDefaultProperties.NdclidOption.IsSet)
                if (trackRequestDefaultProperties.NdclidOption.Value != null)
                    writer.WriteString("ndclid", trackRequestDefaultProperties.Ndclid);
                else
                    writer.WriteNull("ndclid");

            if (trackRequestDefaultProperties.DclidOption.IsSet)
                if (trackRequestDefaultProperties.DclidOption.Value != null)
                    writer.WriteString("dclid", trackRequestDefaultProperties.Dclid);
                else
                    writer.WriteNull("dclid");

            if (trackRequestDefaultProperties.QclidOption.IsSet)
                if (trackRequestDefaultProperties.QclidOption.Value != null)
                    writer.WriteString("qclid", trackRequestDefaultProperties.Qclid);
                else
                    writer.WriteNull("qclid");

            if (trackRequestDefaultProperties.RdtCidOption.IsSet)
                if (trackRequestDefaultProperties.RdtCidOption.Value != null)
                    writer.WriteString("rdt_cid", trackRequestDefaultProperties.RdtCid);
                else
                    writer.WriteNull("rdt_cid");

            if (trackRequestDefaultProperties.HostOption.IsSet)
                if (trackRequestDefaultProperties.HostOption.Value != null)
                    writer.WriteString("host", trackRequestDefaultProperties.Host);
                else
                    writer.WriteNull("host");

            if (trackRequestDefaultProperties.IpOption.IsSet)
                if (trackRequestDefaultProperties.IpOption.Value != null)
                    writer.WriteString("ip", trackRequestDefaultProperties.Ip);
                else
                    writer.WriteNull("ip");

            if (trackRequestDefaultProperties.MsclkidOption.IsSet)
                if (trackRequestDefaultProperties.MsclkidOption.Value != null)
                    writer.WriteString("msclkid", trackRequestDefaultProperties.Msclkid);
                else
                    writer.WriteNull("msclkid");

            if (trackRequestDefaultProperties.LiFatIdOption.IsSet)
                if (trackRequestDefaultProperties.LiFatIdOption.Value != null)
                    writer.WriteString("li_fat_id", trackRequestDefaultProperties.LiFatId);
                else
                    writer.WriteNull("li_fat_id");

            if (trackRequestDefaultProperties.PathnameOption.IsSet)
                if (trackRequestDefaultProperties.PathnameOption.Value != null)
                    writer.WriteString("pathname", trackRequestDefaultProperties.Pathname);
                else
                    writer.WriteNull("pathname");

            if (trackRequestDefaultProperties.ReferrerOption.IsSet)
                if (trackRequestDefaultProperties.ReferrerOption.Value != null)
                    writer.WriteString("referrer", trackRequestDefaultProperties.Referrer);
                else
                    writer.WriteNull("referrer");

            if (trackRequestDefaultProperties.ScreenHeightOption.IsSet)
                if (trackRequestDefaultProperties.ScreenHeightOption.Value != null)
                    writer.WriteNumber("screen_height", trackRequestDefaultProperties.ScreenHeightOption.Value!.Value);
                else
                    writer.WriteNull("screen_height");

            if (trackRequestDefaultProperties.ScreenWidthOption.IsSet)
                if (trackRequestDefaultProperties.ScreenWidthOption.Value != null)
                    writer.WriteNumber("screen_width", trackRequestDefaultProperties.ScreenWidthOption.Value!.Value);
                else
                    writer.WriteNull("screen_width");

            if (trackRequestDefaultProperties.TitleOption.IsSet)
                if (trackRequestDefaultProperties.TitleOption.Value != null)
                    writer.WriteString("title", trackRequestDefaultProperties.Title);
                else
                    writer.WriteNull("title");

            if (trackRequestDefaultProperties.UserAgentOption.IsSet)
                if (trackRequestDefaultProperties.UserAgentOption.Value != null)
                    writer.WriteString("user_agent", trackRequestDefaultProperties.UserAgent);
                else
                    writer.WriteNull("user_agent");

            if (trackRequestDefaultProperties.UtmCampaignOption.IsSet)
                if (trackRequestDefaultProperties.UtmCampaignOption.Value != null)
                    writer.WriteString("utm_campaign", trackRequestDefaultProperties.UtmCampaign);
                else
                    writer.WriteNull("utm_campaign");

            if (trackRequestDefaultProperties.UtmContentOption.IsSet)
                if (trackRequestDefaultProperties.UtmContentOption.Value != null)
                    writer.WriteString("utm_content", trackRequestDefaultProperties.UtmContent);
                else
                    writer.WriteNull("utm_content");

            if (trackRequestDefaultProperties.UtmMediumOption.IsSet)
                if (trackRequestDefaultProperties.UtmMediumOption.Value != null)
                    writer.WriteString("utm_medium", trackRequestDefaultProperties.UtmMedium);
                else
                    writer.WriteNull("utm_medium");

            if (trackRequestDefaultProperties.UtmNameOption.IsSet)
                if (trackRequestDefaultProperties.UtmNameOption.Value != null)
                    writer.WriteString("utm_name", trackRequestDefaultProperties.UtmName);
                else
                    writer.WriteNull("utm_name");

            if (trackRequestDefaultProperties.TtclidOption.IsSet)
                if (trackRequestDefaultProperties.TtclidOption.Value != null)
                    writer.WriteString("ttclid", trackRequestDefaultProperties.Ttclid);
                else
                    writer.WriteNull("ttclid");

            if (trackRequestDefaultProperties.TwclidOption.IsSet)
                if (trackRequestDefaultProperties.TwclidOption.Value != null)
                    writer.WriteString("twclid", trackRequestDefaultProperties.Twclid);
                else
                    writer.WriteNull("twclid");

            if (trackRequestDefaultProperties.ClickidOption.IsSet)
                if (trackRequestDefaultProperties.ClickidOption.Value != null)
                    writer.WriteString("clickid", trackRequestDefaultProperties.Clickid);
                else
                    writer.WriteNull("clickid");

            if (trackRequestDefaultProperties.ClidOption.IsSet)
                if (trackRequestDefaultProperties.ClidOption.Value != null)
                    writer.WriteString("clid", trackRequestDefaultProperties.Clid);
                else
                    writer.WriteNull("clid");

            if (trackRequestDefaultProperties.SccidOption.IsSet)
                if (trackRequestDefaultProperties.SccidOption.Value != null)
                    writer.WriteString("sccid", trackRequestDefaultProperties.Sccid);
                else
                    writer.WriteNull("sccid");

            if (trackRequestDefaultProperties.UtmSourceOption.IsSet)
                if (trackRequestDefaultProperties.UtmSourceOption.Value != null)
                    writer.WriteString("utm_source", trackRequestDefaultProperties.UtmSource);
                else
                    writer.WriteNull("utm_source");

            if (trackRequestDefaultProperties.UtmTermOption.IsSet)
                if (trackRequestDefaultProperties.UtmTermOption.Value != null)
                    writer.WriteString("utm_term", trackRequestDefaultProperties.UtmTerm);
                else
                    writer.WriteNull("utm_term");

            if (trackRequestDefaultProperties.VarVersionOption.IsSet)
                if (trackRequestDefaultProperties.VarVersionOption.Value != null)
                    writer.WriteString("version", trackRequestDefaultProperties.VarVersion);
                else
                    writer.WriteNull("version");

            if (trackRequestDefaultProperties.WbraidOption.IsSet)
                if (trackRequestDefaultProperties.WbraidOption.Value != null)
                    writer.WriteString("wbraid", trackRequestDefaultProperties.Wbraid);
                else
                    writer.WriteNull("wbraid");

            if (trackRequestDefaultProperties.UafvlOption.IsSet)
                if (trackRequestDefaultProperties.UafvlOption.Value != null)
                    writer.WriteString("uafvl", trackRequestDefaultProperties.Uafvl);
                else
                    writer.WriteNull("uafvl");

            if (trackRequestDefaultProperties.PageHashOption.IsSet)
                if (trackRequestDefaultProperties.PageHashOption.Value != null)
                    writer.WriteNumber("page_hash", trackRequestDefaultProperties.PageHashOption.Value!.Value);
                else
                    writer.WriteNull("page_hash");

            if (trackRequestDefaultProperties.SidOption.IsSet)
                if (trackRequestDefaultProperties.SidOption.Value != null)
                    writer.WriteString("sid", trackRequestDefaultProperties.Sid);
                else
                    writer.WriteNull("sid");

            if (trackRequestDefaultProperties.NewSOption.IsSet)
                if (trackRequestDefaultProperties.NewSOption.Value != null)
                    writer.WriteBoolean("new_s", trackRequestDefaultProperties.NewSOption.Value!.Value);
                else
                    writer.WriteNull("new_s");

            if (trackRequestDefaultProperties.FvOption.IsSet)
                if (trackRequestDefaultProperties.FvOption.Value != null)
                    writer.WriteBoolean("fv", trackRequestDefaultProperties.FvOption.Value!.Value);
                else
                    writer.WriteNull("fv");

            if (trackRequestDefaultProperties.SrOption.IsSet)
                if (trackRequestDefaultProperties.SrOption.Value != null)
                    writer.WriteString("sr", trackRequestDefaultProperties.Sr);
                else
                    writer.WriteNull("sr");
        }
    }
}
