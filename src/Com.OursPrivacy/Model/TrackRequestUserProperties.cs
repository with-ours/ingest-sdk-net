// <auto-generated>
/*
 * Ours
 *
 * The Ours Server-Side REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Com.OursPrivacy.Client;

namespace Com.OursPrivacy.Model
{
    /// <summary>
    /// Additional user properties you want to pass along to the destinations. (optional) You can also update these properties via the identify endpoint.
    /// </summary>
    public partial class TrackRequestUserProperties : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackRequestUserProperties" /> class.
        /// </summary>
        /// <param name="email">email</param>
        /// <param name="firstName">firstName</param>
        /// <param name="lastName">lastName</param>
        /// <param name="gender">gender</param>
        /// <param name="dateOfBirth">dateOfBirth</param>
        /// <param name="phoneNumber">phoneNumber</param>
        /// <param name="city">city</param>
        /// <param name="state">state</param>
        /// <param name="zip">zip</param>
        /// <param name="country">country</param>
        /// <param name="externalId">externalId</param>
        /// <param name="companyName">companyName</param>
        /// <param name="jobTitle">jobTitle</param>
        /// <param name="ip">The IP address of the user</param>
        /// <param name="customProperties">customProperties</param>
        [JsonConstructor]
        public TrackRequestUserProperties(Option<string?> email = default, Option<string?> firstName = default, Option<string?> lastName = default, Option<string?> gender = default, Option<string?> dateOfBirth = default, Option<Object?> phoneNumber = default, Option<string?> city = default, Option<string?> state = default, Option<Object?> zip = default, Option<string?> country = default, Option<string?> externalId = default, Option<string?> companyName = default, Option<string?> jobTitle = default, Option<string?> ip = default, Option<Dictionary<string, Object>?> customProperties = default)
        {
            EmailOption = email;
            FirstNameOption = firstName;
            LastNameOption = lastName;
            GenderOption = gender;
            DateOfBirthOption = dateOfBirth;
            PhoneNumberOption = phoneNumber;
            CityOption = city;
            StateOption = state;
            ZipOption = zip;
            CountryOption = country;
            ExternalIdOption = externalId;
            CompanyNameOption = companyName;
            JobTitleOption = jobTitle;
            IpOption = ip;
            CustomPropertiesOption = customProperties;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// Gets or Sets Email
        /// </summary>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of FirstName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> FirstNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets FirstName
        /// </summary>
        [JsonPropertyName("first_name")]
        public string? FirstName { get { return this.FirstNameOption; } set { this.FirstNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of LastName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> LastNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets LastName
        /// </summary>
        [JsonPropertyName("last_name")]
        public string? LastName { get { return this.LastNameOption; } set { this.LastNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of Gender
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> GenderOption { get; private set; }

        /// <summary>
        /// Gets or Sets Gender
        /// </summary>
        [JsonPropertyName("gender")]
        public string? Gender { get { return this.GenderOption; } set { this.GenderOption = new(value); } }

        /// <summary>
        /// Used to track the state of DateOfBirth
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DateOfBirthOption { get; private set; }

        /// <summary>
        /// Gets or Sets DateOfBirth
        /// </summary>
        [JsonPropertyName("date_of_birth")]
        public string? DateOfBirth { get { return this.DateOfBirthOption; } set { this.DateOfBirthOption = new(value); } }

        /// <summary>
        /// Used to track the state of PhoneNumber
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> PhoneNumberOption { get; private set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [JsonPropertyName("phone_number")]
        public Object? PhoneNumber { get { return this.PhoneNumberOption; } set { this.PhoneNumberOption = new(value); } }

        /// <summary>
        /// Used to track the state of City
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CityOption { get; private set; }

        /// <summary>
        /// Gets or Sets City
        /// </summary>
        [JsonPropertyName("city")]
        public string? City { get { return this.CityOption; } set { this.CityOption = new(value); } }

        /// <summary>
        /// Used to track the state of State
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> StateOption { get; private set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonPropertyName("state")]
        public string? State { get { return this.StateOption; } set { this.StateOption = new(value); } }

        /// <summary>
        /// Used to track the state of Zip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Object?> ZipOption { get; private set; }

        /// <summary>
        /// Gets or Sets Zip
        /// </summary>
        [JsonPropertyName("zip")]
        public Object? Zip { get { return this.ZipOption; } set { this.ZipOption = new(value); } }

        /// <summary>
        /// Used to track the state of Country
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CountryOption { get; private set; }

        /// <summary>
        /// Gets or Sets Country
        /// </summary>
        [JsonPropertyName("country")]
        public string? Country { get { return this.CountryOption; } set { this.CountryOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// Gets or Sets ExternalId
        /// </summary>
        [JsonPropertyName("external_id")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of CompanyName
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> CompanyNameOption { get; private set; }

        /// <summary>
        /// Gets or Sets CompanyName
        /// </summary>
        [JsonPropertyName("company_name")]
        public string? CompanyName { get { return this.CompanyNameOption; } set { this.CompanyNameOption = new(value); } }

        /// <summary>
        /// Used to track the state of JobTitle
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> JobTitleOption { get; private set; }

        /// <summary>
        /// Gets or Sets JobTitle
        /// </summary>
        [JsonPropertyName("job_title")]
        public string? JobTitle { get { return this.JobTitleOption; } set { this.JobTitleOption = new(value); } }

        /// <summary>
        /// Used to track the state of Ip
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> IpOption { get; private set; }

        /// <summary>
        /// The IP address of the user
        /// </summary>
        /// <value>The IP address of the user</value>
        [JsonPropertyName("ip")]
        public string? Ip { get { return this.IpOption; } set { this.IpOption = new(value); } }

        /// <summary>
        /// Used to track the state of CustomProperties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> CustomPropertiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets CustomProperties
        /// </summary>
        [JsonPropertyName("custom_properties")]
        public Dictionary<string, Object>? CustomProperties { get { return this.CustomPropertiesOption; } set { this.CustomPropertiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackRequestUserProperties {\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  FirstName: ").Append(FirstName).Append("\n");
            sb.Append("  LastName: ").Append(LastName).Append("\n");
            sb.Append("  Gender: ").Append(Gender).Append("\n");
            sb.Append("  DateOfBirth: ").Append(DateOfBirth).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  City: ").Append(City).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  Zip: ").Append(Zip).Append("\n");
            sb.Append("  Country: ").Append(Country).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  CompanyName: ").Append(CompanyName).Append("\n");
            sb.Append("  JobTitle: ").Append(JobTitle).Append("\n");
            sb.Append("  Ip: ").Append(Ip).Append("\n");
            sb.Append("  CustomProperties: ").Append(CustomProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 2000.", new [] { "Email" });
            }

            // FirstName (string) maxLength
            if (this.FirstName != null && this.FirstName.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for FirstName, length must be less than 2000.", new [] { "FirstName" });
            }

            // LastName (string) maxLength
            if (this.LastName != null && this.LastName.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for LastName, length must be less than 2000.", new [] { "LastName" });
            }

            // Gender (string) maxLength
            if (this.Gender != null && this.Gender.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Gender, length must be less than 2000.", new [] { "Gender" });
            }

            // DateOfBirth (string) maxLength
            if (this.DateOfBirth != null && this.DateOfBirth.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for DateOfBirth, length must be less than 2000.", new [] { "DateOfBirth" });
            }

            // City (string) maxLength
            if (this.City != null && this.City.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for City, length must be less than 2000.", new [] { "City" });
            }

            // State (string) maxLength
            if (this.State != null && this.State.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for State, length must be less than 2000.", new [] { "State" });
            }

            // Country (string) maxLength
            if (this.Country != null && this.Country.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Country, length must be less than 2000.", new [] { "Country" });
            }

            // ExternalId (string) maxLength
            if (this.ExternalId != null && this.ExternalId.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for ExternalId, length must be less than 2000.", new [] { "ExternalId" });
            }

            // CompanyName (string) maxLength
            if (this.CompanyName != null && this.CompanyName.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for CompanyName, length must be less than 2000.", new [] { "CompanyName" });
            }

            // JobTitle (string) maxLength
            if (this.JobTitle != null && this.JobTitle.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for JobTitle, length must be less than 2000.", new [] { "JobTitle" });
            }

            // Ip (string) maxLength
            if (this.Ip != null && this.Ip.Length > 2000)
            {
                yield return new ValidationResult("Invalid value for Ip, length must be less than 2000.", new [] { "Ip" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackRequestUserProperties" />
    /// </summary>
    public class TrackRequestUserPropertiesJsonConverter : JsonConverter<TrackRequestUserProperties>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackRequestUserProperties" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackRequestUserProperties Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> email = default;
            Option<string?> firstName = default;
            Option<string?> lastName = default;
            Option<string?> gender = default;
            Option<string?> dateOfBirth = default;
            Option<Object?> phoneNumber = default;
            Option<string?> city = default;
            Option<string?> state = default;
            Option<Object?> zip = default;
            Option<string?> country = default;
            Option<string?> externalId = default;
            Option<string?> companyName = default;
            Option<string?> jobTitle = default;
            Option<string?> ip = default;
            Option<Dictionary<string, Object>?> customProperties = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "first_name":
                            firstName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "last_name":
                            lastName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "gender":
                            gender = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "date_of_birth":
                            dateOfBirth = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "phone_number":
                            phoneNumber = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "city":
                            city = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "state":
                            state = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "zip":
                            zip = new Option<Object?>(JsonSerializer.Deserialize<Object>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "country":
                            country = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "external_id":
                            externalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "company_name":
                            companyName = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "job_title":
                            jobTitle = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "ip":
                            ip = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "custom_properties":
                            customProperties = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            return new TrackRequestUserProperties(email, firstName, lastName, gender, dateOfBirth, phoneNumber, city, state, zip, country, externalId, companyName, jobTitle, ip, customProperties);
        }

        /// <summary>
        /// Serializes a <see cref="TrackRequestUserProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackRequestUserProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackRequestUserProperties trackRequestUserProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackRequestUserProperties, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackRequestUserProperties" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackRequestUserProperties"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackRequestUserProperties trackRequestUserProperties, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackRequestUserProperties.EmailOption.IsSet)
                if (trackRequestUserProperties.EmailOption.Value != null)
                    writer.WriteString("email", trackRequestUserProperties.Email);
                else
                    writer.WriteNull("email");

            if (trackRequestUserProperties.FirstNameOption.IsSet)
                if (trackRequestUserProperties.FirstNameOption.Value != null)
                    writer.WriteString("first_name", trackRequestUserProperties.FirstName);
                else
                    writer.WriteNull("first_name");

            if (trackRequestUserProperties.LastNameOption.IsSet)
                if (trackRequestUserProperties.LastNameOption.Value != null)
                    writer.WriteString("last_name", trackRequestUserProperties.LastName);
                else
                    writer.WriteNull("last_name");

            if (trackRequestUserProperties.GenderOption.IsSet)
                if (trackRequestUserProperties.GenderOption.Value != null)
                    writer.WriteString("gender", trackRequestUserProperties.Gender);
                else
                    writer.WriteNull("gender");

            if (trackRequestUserProperties.DateOfBirthOption.IsSet)
                if (trackRequestUserProperties.DateOfBirthOption.Value != null)
                    writer.WriteString("date_of_birth", trackRequestUserProperties.DateOfBirth);
                else
                    writer.WriteNull("date_of_birth");

            if (trackRequestUserProperties.PhoneNumberOption.IsSet)
                if (trackRequestUserProperties.PhoneNumberOption.Value != null)
                {
                    writer.WritePropertyName("phone_number");
                    JsonSerializer.Serialize(writer, trackRequestUserProperties.PhoneNumber, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("phone_number");
            if (trackRequestUserProperties.CityOption.IsSet)
                if (trackRequestUserProperties.CityOption.Value != null)
                    writer.WriteString("city", trackRequestUserProperties.City);
                else
                    writer.WriteNull("city");

            if (trackRequestUserProperties.StateOption.IsSet)
                if (trackRequestUserProperties.StateOption.Value != null)
                    writer.WriteString("state", trackRequestUserProperties.State);
                else
                    writer.WriteNull("state");

            if (trackRequestUserProperties.ZipOption.IsSet)
                if (trackRequestUserProperties.ZipOption.Value != null)
                {
                    writer.WritePropertyName("zip");
                    JsonSerializer.Serialize(writer, trackRequestUserProperties.Zip, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("zip");
            if (trackRequestUserProperties.CountryOption.IsSet)
                if (trackRequestUserProperties.CountryOption.Value != null)
                    writer.WriteString("country", trackRequestUserProperties.Country);
                else
                    writer.WriteNull("country");

            if (trackRequestUserProperties.ExternalIdOption.IsSet)
                if (trackRequestUserProperties.ExternalIdOption.Value != null)
                    writer.WriteString("external_id", trackRequestUserProperties.ExternalId);
                else
                    writer.WriteNull("external_id");

            if (trackRequestUserProperties.CompanyNameOption.IsSet)
                if (trackRequestUserProperties.CompanyNameOption.Value != null)
                    writer.WriteString("company_name", trackRequestUserProperties.CompanyName);
                else
                    writer.WriteNull("company_name");

            if (trackRequestUserProperties.JobTitleOption.IsSet)
                if (trackRequestUserProperties.JobTitleOption.Value != null)
                    writer.WriteString("job_title", trackRequestUserProperties.JobTitle);
                else
                    writer.WriteNull("job_title");

            if (trackRequestUserProperties.IpOption.IsSet)
                if (trackRequestUserProperties.IpOption.Value != null)
                    writer.WriteString("ip", trackRequestUserProperties.Ip);
                else
                    writer.WriteNull("ip");

            if (trackRequestUserProperties.CustomPropertiesOption.IsSet)
                if (trackRequestUserProperties.CustomPropertiesOption.Value != null)
                {
                    writer.WritePropertyName("custom_properties");
                    JsonSerializer.Serialize(writer, trackRequestUserProperties.CustomProperties, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("custom_properties");
        }
    }
}
