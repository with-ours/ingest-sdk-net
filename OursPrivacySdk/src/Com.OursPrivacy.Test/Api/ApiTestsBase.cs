/*
 * Ours
 *
 * The Ours Server-Side REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using Microsoft.Extensions.Hosting;
using Com.OursPrivacy.Extensions;
using Microsoft.Extensions.DependencyInjection;
using Com.OursPrivacy.Api;


/* *********************************************************************************
*              Follow these manual steps to construct tests.
*              This file will not be overwritten.
*  *********************************************************************************
* 1. Navigate to ApiTests.Base.cs and ensure any tokens are being created correctly.
*    Take care not to commit credentials to any repository.
*
* 2. Mocking is coordinated by ApiTestsBase#AddApiHttpClients.
*    To mock the client, use the generic AddApiHttpClients.
*    To mock the server, change the client's BaseAddress.
*
* 3. Locate the test you want below
*      - remove the skip property from the Fact attribute
*      - set the value of any variables if necessary
*
* 4. Run the tests and ensure they work.
*
*/


namespace Com.OursPrivacy.Test.Api
{
    /// <summary>
    ///  Base class for API tests
    /// </summary>
    public class ApiTestsBase
    {
        protected readonly IOursPrivacyApi _instance;
        protected readonly IHost _host;

        public ApiTestsBase(string[] args)
        {
            _host = CreateHostBuilder(args).Build();
            _instance = _host.Services.GetRequiredService<IOursPrivacyApi>();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) => Host.CreateDefaultBuilder(args)
            .ConfigureOursPrivacy((context, services, options) =>
            {
                options.ConfigureApiKey("Test_Key");
                options.AddApiHttpClients(client =>
                {
                        client.BaseAddress = new Uri("https://mocked.oursprivacy.local/");
                }, builder =>
                {
                    builder
                        .ConfigurePrimaryHttpMessageHandler(() => new MockHttpMessageHandler());
                });
            });
    }
}
