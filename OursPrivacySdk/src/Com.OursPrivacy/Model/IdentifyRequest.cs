// <auto-generated>
/*
 * Ours
 *
 * The Ours Server-Side REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Com.OursPrivacy.Client;

namespace Com.OursPrivacy.Model
{
    /// <summary>
    /// IdentifyRequest
    /// </summary>
    public partial class IdentifyRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="IdentifyRequest" /> class.
        /// </summary>
        /// <param name="userId">The Ours user id stored in local storage and cookies on your web properties. If userId is included in the request, we do not lookup the user by email or externalId.</param>
        /// <param name="userProperties">userProperties</param>
        /// <param name="defaultProperties">defaultProperties</param>
        [JsonConstructor]
        public IdentifyRequest(string userId, IdentifyRequestUserProperties userProperties, Option<TrackRequestDefaultProperties?> defaultProperties = default)
        {
            UserId = userId;
            UserProperties = userProperties;
            DefaultPropertiesOption = defaultProperties;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The token for your Ours Privacy Source. You can find this in the Ours dashboard.
        /// </summary>
        /// <value>The token for your Ours Privacy Source. You can find this in the Ours dashboard.</value>
        [JsonPropertyName("token")]
        internal string? Token { get; set; }

        /// <summary>
        /// The Ours user id stored in local storage and cookies on your web properties. If userId is included in the request, we do not lookup the user by email or externalId.
        /// </summary>
        /// <value>The Ours user id stored in local storage and cookies on your web properties. If userId is included in the request, we do not lookup the user by email or externalId.</value>
        [JsonPropertyName("userId")]
        public string UserId { get; set; }

        /// <summary>
        /// Gets or Sets UserProperties
        /// </summary>
        [JsonPropertyName("userProperties")]
        public IdentifyRequestUserProperties UserProperties { get; set; }

        /// <summary>
        /// Used to track the state of DefaultProperties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TrackRequestDefaultProperties?> DefaultPropertiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultProperties
        /// </summary>
        [JsonPropertyName("defaultProperties")]
        public TrackRequestDefaultProperties? DefaultProperties { get { return this.DefaultPropertiesOption; } set { this.DefaultPropertiesOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class IdentifyRequest {\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  UserProperties: ").Append(UserProperties).Append("\n");
            sb.Append("  DefaultProperties: ").Append(DefaultProperties).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // UserId (string) maxLength
            if (this.UserId != null && this.UserId.Length > 400)
            {
                yield return new ValidationResult("Invalid value for UserId, length must be less than 400.", new [] { "UserId" });
            }

            // UserId (string) minLength
            if (this.UserId != null && this.UserId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for UserId, length must be greater than 1.", new [] { "UserId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="IdentifyRequest" />
    /// </summary>
    public class IdentifyRequestJsonConverter : JsonConverter<IdentifyRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="IdentifyRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override IdentifyRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> userId = default;
            Option<IdentifyRequestUserProperties?> userProperties = default;
            Option<TrackRequestDefaultProperties?> defaultProperties = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "userId":
                            userId = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "userProperties":
                            userProperties = new Option<IdentifyRequestUserProperties?>(JsonSerializer.Deserialize<IdentifyRequestUserProperties>(ref utf8JsonReader, jsonSerializerOptions)!);
                            break;
                        case "defaultProperties":
                            defaultProperties = new Option<TrackRequestDefaultProperties?>(JsonSerializer.Deserialize<TrackRequestDefaultProperties>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!userId.IsSet)
                throw new ArgumentException("Property is required for class IdentifyRequest.", nameof(userId));

            if (!userProperties.IsSet)
                throw new ArgumentException("Property is required for class IdentifyRequest.", nameof(userProperties));

            if (userId.IsSet && userId.Value == null)
                throw new ArgumentNullException(nameof(userId), "Property is not nullable for class IdentifyRequest.");

            if (userProperties.IsSet && userProperties.Value == null)
                throw new ArgumentNullException(nameof(userProperties), "Property is not nullable for class IdentifyRequest.");

            return new IdentifyRequest(userId.Value!, userProperties.Value!, defaultProperties);
        }

        /// <summary>
        /// Serializes a <see cref="IdentifyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="identifyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, IdentifyRequest identifyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, identifyRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="IdentifyRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="identifyRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, IdentifyRequest identifyRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (identifyRequest.Token == null)
                throw new ArgumentNullException(nameof(identifyRequest.Token), "Property is required for class IdentifyRequest.");

            if (identifyRequest.UserId == null)
                throw new ArgumentNullException(nameof(identifyRequest.UserId), "Property is required for class IdentifyRequest.");

            if (identifyRequest.UserProperties == null)
                throw new ArgumentNullException(nameof(identifyRequest.UserProperties), "Property is required for class IdentifyRequest.");

            writer.WriteString("token", identifyRequest.Token);

            writer.WriteString("userId", identifyRequest.UserId);

            writer.WritePropertyName("userProperties");
            JsonSerializer.Serialize(writer, identifyRequest.UserProperties, jsonSerializerOptions);
            if (identifyRequest.DefaultPropertiesOption.IsSet)
                if (identifyRequest.DefaultPropertiesOption.Value != null)
                {
                    writer.WritePropertyName("defaultProperties");
                    JsonSerializer.Serialize(writer, identifyRequest.DefaultProperties, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("defaultProperties");
        }
    }
}
