// <auto-generated>
/*
 * Ours
 *
 * The Ours Server-Side REST API
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

#nullable enable

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Text.Json;
using System.Text.Json.Serialization;
using System.ComponentModel.DataAnnotations;
using Com.OursPrivacy.Client;

namespace Com.OursPrivacy.Model
{
    /// <summary>
    /// TrackRequest
    /// </summary>
    public partial class TrackRequest : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TrackRequest" /> class.
        /// </summary>
        /// <param name="event">The name of the event you&#39;re tracking. This must be whitelisted in the Ours dashboard.</param>
        /// <param name="token">The token for your Ours Privacy Source. You can find this in the Ours dashboard.</param>
        /// <param name="time">The time at which the event occurred, in seconds or milliseconds since UTC epoch. The time must be in the past and within the last 7 days.</param>
        /// <param name="userId">The Ours user id stored in local storage and cookies on your web properties. If userId is included in the request, we do not lookup the user by email or externalId.</param>
        /// <param name="externalId">The externalId (the ID in your system) of a user. We will associate this event with the user or create a user. If included in the request, email lookup is ignored.</param>
        /// <param name="email">The email address of a user. We will associate this event with the user or create a user. Used for lookup if externalId and userId are not included in the request.</param>
        /// <param name="eventProperties">Any additional event properties you want to pass along.</param>
        /// <param name="userProperties">userProperties</param>
        /// <param name="defaultProperties">defaultProperties</param>
        /// <param name="distinctId">A unique identifier for the event. This helps prevent duplicate events.</param>
        [JsonConstructor]
        public TrackRequest(string @event, string token, Option<decimal?> time = default, Option<string?> userId = default, Option<string?> externalId = default, Option<string?> email = default, Option<Dictionary<string, Object>?> eventProperties = default, Option<TrackRequestUserProperties?> userProperties = default, Option<TrackRequestDefaultProperties?> defaultProperties = default, Option<string?> distinctId = default)
        {
            Event = @event;
            Token = token;
            TimeOption = time;
            UserIdOption = userId;
            ExternalIdOption = externalId;
            EmailOption = email;
            EventPropertiesOption = eventProperties;
            UserPropertiesOption = userProperties;
            DefaultPropertiesOption = defaultProperties;
            DistinctIdOption = distinctId;
            OnCreated();
        }

        partial void OnCreated();

        /// <summary>
        /// The name of the event you&#39;re tracking. This must be whitelisted in the Ours dashboard.
        /// </summary>
        /// <value>The name of the event you&#39;re tracking. This must be whitelisted in the Ours dashboard.</value>
        [JsonPropertyName("event")]
        public string Event { get; set; }

        /// <summary>
        /// The token for your Ours Privacy Source. You can find this in the Ours dashboard.
        /// </summary>
        /// <value>The token for your Ours Privacy Source. You can find this in the Ours dashboard.</value>
        [JsonPropertyName("token")]
        public string Token { get; set; }

        /// <summary>
        /// Used to track the state of Time
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<decimal?> TimeOption { get; private set; }

        /// <summary>
        /// The time at which the event occurred, in seconds or milliseconds since UTC epoch. The time must be in the past and within the last 7 days.
        /// </summary>
        /// <value>The time at which the event occurred, in seconds or milliseconds since UTC epoch. The time must be in the past and within the last 7 days.</value>
        [JsonPropertyName("time")]
        public decimal? Time { get { return this.TimeOption; } set { this.TimeOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> UserIdOption { get; private set; }

        /// <summary>
        /// The Ours user id stored in local storage and cookies on your web properties. If userId is included in the request, we do not lookup the user by email or externalId.
        /// </summary>
        /// <value>The Ours user id stored in local storage and cookies on your web properties. If userId is included in the request, we do not lookup the user by email or externalId.</value>
        [JsonPropertyName("userId")]
        public string? UserId { get { return this.UserIdOption; } set { this.UserIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of ExternalId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> ExternalIdOption { get; private set; }

        /// <summary>
        /// The externalId (the ID in your system) of a user. We will associate this event with the user or create a user. If included in the request, email lookup is ignored.
        /// </summary>
        /// <value>The externalId (the ID in your system) of a user. We will associate this event with the user or create a user. If included in the request, email lookup is ignored.</value>
        [JsonPropertyName("externalId")]
        public string? ExternalId { get { return this.ExternalIdOption; } set { this.ExternalIdOption = new(value); } }

        /// <summary>
        /// Used to track the state of Email
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> EmailOption { get; private set; }

        /// <summary>
        /// The email address of a user. We will associate this event with the user or create a user. Used for lookup if externalId and userId are not included in the request.
        /// </summary>
        /// <value>The email address of a user. We will associate this event with the user or create a user. Used for lookup if externalId and userId are not included in the request.</value>
        [JsonPropertyName("email")]
        public string? Email { get { return this.EmailOption; } set { this.EmailOption = new(value); } }

        /// <summary>
        /// Used to track the state of EventProperties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<Dictionary<string, Object>?> EventPropertiesOption { get; private set; }

        /// <summary>
        /// Any additional event properties you want to pass along.
        /// </summary>
        /// <value>Any additional event properties you want to pass along.</value>
        [JsonPropertyName("eventProperties")]
        public Dictionary<string, Object>? EventProperties { get { return this.EventPropertiesOption; } set { this.EventPropertiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of UserProperties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TrackRequestUserProperties?> UserPropertiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets UserProperties
        /// </summary>
        [JsonPropertyName("userProperties")]
        public TrackRequestUserProperties? UserProperties { get { return this.UserPropertiesOption; } set { this.UserPropertiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of DefaultProperties
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<TrackRequestDefaultProperties?> DefaultPropertiesOption { get; private set; }

        /// <summary>
        /// Gets or Sets DefaultProperties
        /// </summary>
        [JsonPropertyName("defaultProperties")]
        public TrackRequestDefaultProperties? DefaultProperties { get { return this.DefaultPropertiesOption; } set { this.DefaultPropertiesOption = new(value); } }

        /// <summary>
        /// Used to track the state of DistinctId
        /// </summary>
        [JsonIgnore]
        [global::System.ComponentModel.EditorBrowsable(global::System.ComponentModel.EditorBrowsableState.Never)]
        public Option<string?> DistinctIdOption { get; private set; }

        /// <summary>
        /// A unique identifier for the event. This helps prevent duplicate events.
        /// </summary>
        /// <value>A unique identifier for the event. This helps prevent duplicate events.</value>
        [JsonPropertyName("distinctId")]
        public string? DistinctId { get { return this.DistinctIdOption; } set { this.DistinctIdOption = new(value); } }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class TrackRequest {\n");
            sb.Append("  Event: ").Append(Event).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  Time: ").Append(Time).Append("\n");
            sb.Append("  UserId: ").Append(UserId).Append("\n");
            sb.Append("  ExternalId: ").Append(ExternalId).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  EventProperties: ").Append(EventProperties).Append("\n");
            sb.Append("  UserProperties: ").Append(UserProperties).Append("\n");
            sb.Append("  DefaultProperties: ").Append(DefaultProperties).Append("\n");
            sb.Append("  DistinctId: ").Append(DistinctId).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            // Event (string) maxLength
            if (this.Event != null && this.Event.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Event, length must be less than 1000.", new [] { "Event" });
            }

            // Event (string) minLength
            if (this.Event != null && this.Event.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Event, length must be greater than 1.", new [] { "Event" });
            }

            // Token (string) maxLength
            if (this.Token != null && this.Token.Length > 250)
            {
                yield return new ValidationResult("Invalid value for Token, length must be less than 250.", new [] { "Token" });
            }

            // Token (string) minLength
            if (this.Token != null && this.Token.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Token, length must be greater than 1.", new [] { "Token" });
            }

            // UserId (string) maxLength
            if (this.UserId != null && this.UserId.Length > 400)
            {
                yield return new ValidationResult("Invalid value for UserId, length must be less than 400.", new [] { "UserId" });
            }

            // UserId (string) minLength
            if (this.UserId != null && this.UserId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for UserId, length must be greater than 1.", new [] { "UserId" });
            }

            // ExternalId (string) maxLength
            if (this.ExternalId != null && this.ExternalId.Length > 400)
            {
                yield return new ValidationResult("Invalid value for ExternalId, length must be less than 400.", new [] { "ExternalId" });
            }

            // ExternalId (string) minLength
            if (this.ExternalId != null && this.ExternalId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for ExternalId, length must be greater than 1.", new [] { "ExternalId" });
            }

            // Email (string) maxLength
            if (this.Email != null && this.Email.Length > 1000)
            {
                yield return new ValidationResult("Invalid value for Email, length must be less than 1000.", new [] { "Email" });
            }

            // Email (string) minLength
            if (this.Email != null && this.Email.Length < 1)
            {
                yield return new ValidationResult("Invalid value for Email, length must be greater than 1.", new [] { "Email" });
            }

            // DistinctId (string) maxLength
            if (this.DistinctId != null && this.DistinctId.Length > 400)
            {
                yield return new ValidationResult("Invalid value for DistinctId, length must be less than 400.", new [] { "DistinctId" });
            }

            // DistinctId (string) minLength
            if (this.DistinctId != null && this.DistinctId.Length < 1)
            {
                yield return new ValidationResult("Invalid value for DistinctId, length must be greater than 1.", new [] { "DistinctId" });
            }

            yield break;
        }
    }

    /// <summary>
    /// A Json converter for type <see cref="TrackRequest" />
    /// </summary>
    public class TrackRequestJsonConverter : JsonConverter<TrackRequest>
    {
        /// <summary>
        /// Deserializes json to <see cref="TrackRequest" />
        /// </summary>
        /// <param name="utf8JsonReader"></param>
        /// <param name="typeToConvert"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <returns></returns>
        /// <exception cref="JsonException"></exception>
        public override TrackRequest Read(ref Utf8JsonReader utf8JsonReader, Type typeToConvert, JsonSerializerOptions jsonSerializerOptions)
        {
            int currentDepth = utf8JsonReader.CurrentDepth;

            if (utf8JsonReader.TokenType != JsonTokenType.StartObject && utf8JsonReader.TokenType != JsonTokenType.StartArray)
                throw new JsonException();

            JsonTokenType startingTokenType = utf8JsonReader.TokenType;

            Option<string?> varEvent = default;
            Option<string?> token = default;
            Option<decimal?> time = default;
            Option<string?> userId = default;
            Option<string?> externalId = default;
            Option<string?> email = default;
            Option<Dictionary<string, Object>?> eventProperties = default;
            Option<TrackRequestUserProperties?> userProperties = default;
            Option<TrackRequestDefaultProperties?> defaultProperties = default;
            Option<string?> distinctId = default;

            while (utf8JsonReader.Read())
            {
                if (startingTokenType == JsonTokenType.StartObject && utf8JsonReader.TokenType == JsonTokenType.EndObject && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (startingTokenType == JsonTokenType.StartArray && utf8JsonReader.TokenType == JsonTokenType.EndArray && currentDepth == utf8JsonReader.CurrentDepth)
                    break;

                if (utf8JsonReader.TokenType == JsonTokenType.PropertyName && currentDepth == utf8JsonReader.CurrentDepth - 1)
                {
                    string? localVarJsonPropertyName = utf8JsonReader.GetString();
                    utf8JsonReader.Read();

                    switch (localVarJsonPropertyName)
                    {
                        case "event":
                            varEvent = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "token":
                            token = new Option<string?>(utf8JsonReader.GetString()!);
                            break;
                        case "time":
                            time = new Option<decimal?>(utf8JsonReader.TokenType == JsonTokenType.Null ? (decimal?)null : utf8JsonReader.GetDecimal());
                            break;
                        case "userId":
                            userId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "externalId":
                            externalId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "email":
                            email = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        case "eventProperties":
                            eventProperties = new Option<Dictionary<string, Object>?>(JsonSerializer.Deserialize<Dictionary<string, Object>>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "userProperties":
                            userProperties = new Option<TrackRequestUserProperties?>(JsonSerializer.Deserialize<TrackRequestUserProperties>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "defaultProperties":
                            defaultProperties = new Option<TrackRequestDefaultProperties?>(JsonSerializer.Deserialize<TrackRequestDefaultProperties>(ref utf8JsonReader, jsonSerializerOptions));
                            break;
                        case "distinctId":
                            distinctId = new Option<string?>(utf8JsonReader.GetString());
                            break;
                        default:
                            break;
                    }
                }
            }

            if (!varEvent.IsSet)
                throw new ArgumentException("Property is required for class TrackRequest.", nameof(varEvent));

            if (!token.IsSet)
                throw new ArgumentException("Property is required for class TrackRequest.", nameof(token));

            if (varEvent.IsSet && varEvent.Value == null)
                throw new ArgumentNullException(nameof(varEvent), "Property is not nullable for class TrackRequest.");

            if (token.IsSet && token.Value == null)
                throw new ArgumentNullException(nameof(token), "Property is not nullable for class TrackRequest.");

            return new TrackRequest(varEvent.Value!, token.Value!, time, userId, externalId, email, eventProperties, userProperties, defaultProperties, distinctId);
        }

        /// <summary>
        /// Serializes a <see cref="TrackRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public override void Write(Utf8JsonWriter writer, TrackRequest trackRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            writer.WriteStartObject();

            WriteProperties(writer, trackRequest, jsonSerializerOptions);
            writer.WriteEndObject();
        }

        /// <summary>
        /// Serializes the properties of <see cref="TrackRequest" />
        /// </summary>
        /// <param name="writer"></param>
        /// <param name="trackRequest"></param>
        /// <param name="jsonSerializerOptions"></param>
        /// <exception cref="NotImplementedException"></exception>
        public void WriteProperties(Utf8JsonWriter writer, TrackRequest trackRequest, JsonSerializerOptions jsonSerializerOptions)
        {
            if (trackRequest.Event == null)
                throw new ArgumentNullException(nameof(trackRequest.Event), "Property is required for class TrackRequest.");

            if (trackRequest.Token == null)
                throw new ArgumentNullException(nameof(trackRequest.Token), "Property is required for class TrackRequest.");

            writer.WriteString("event", trackRequest.Event);

            writer.WriteString("token", trackRequest.Token);

            if (trackRequest.TimeOption.IsSet)
                if (trackRequest.TimeOption.Value != null)
                    writer.WriteNumber("time", trackRequest.TimeOption.Value!.Value);
                else
                    writer.WriteNull("time");

            if (trackRequest.UserIdOption.IsSet)
                if (trackRequest.UserIdOption.Value != null)
                    writer.WriteString("userId", trackRequest.UserId);
                else
                    writer.WriteNull("userId");

            if (trackRequest.ExternalIdOption.IsSet)
                if (trackRequest.ExternalIdOption.Value != null)
                    writer.WriteString("externalId", trackRequest.ExternalId);
                else
                    writer.WriteNull("externalId");

            if (trackRequest.EmailOption.IsSet)
                if (trackRequest.EmailOption.Value != null)
                    writer.WriteString("email", trackRequest.Email);
                else
                    writer.WriteNull("email");

            if (trackRequest.EventPropertiesOption.IsSet)
                if (trackRequest.EventPropertiesOption.Value != null)
                {
                    writer.WritePropertyName("eventProperties");
                    JsonSerializer.Serialize(writer, trackRequest.EventProperties, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("eventProperties");
            if (trackRequest.UserPropertiesOption.IsSet)
                if (trackRequest.UserPropertiesOption.Value != null)
                {
                    writer.WritePropertyName("userProperties");
                    JsonSerializer.Serialize(writer, trackRequest.UserProperties, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("userProperties");
            if (trackRequest.DefaultPropertiesOption.IsSet)
                if (trackRequest.DefaultPropertiesOption.Value != null)
                {
                    writer.WritePropertyName("defaultProperties");
                    JsonSerializer.Serialize(writer, trackRequest.DefaultProperties, jsonSerializerOptions);
                }
                else
                    writer.WriteNull("defaultProperties");
            if (trackRequest.DistinctIdOption.IsSet)
                if (trackRequest.DistinctIdOption.Value != null)
                    writer.WriteString("distinctId", trackRequest.DistinctId);
                else
                    writer.WriteNull("distinctId");
        }
    }
}
